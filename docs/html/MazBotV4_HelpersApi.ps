%!PS
%%Title: MazBotV4 Helpers API
%%Creator: html2ps version 1.0 beta5
%%EndComments
save
2000 dict begin
/d {bind def} bind def
/D {def} d
/t true D
/f false D
/FL [/Times-Roman
/Times-Italic
/Times-Bold
/Times-BoldItalic
/Courier
/Courier-Oblique
/Courier-Bold
/Courier-BoldOblique
/Helvetica
/Helvetica-Oblique
/Helvetica-Bold
/Helvetica-BoldOblique] D
/WF t D
/WI 0 D
/F 1 D
/IW 454 F div D
/IL 672 F div D
/PS 842 D
/EF [0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 2 2] D
/EZ [11 9 19 17 15 13 12 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 8 8] D
/Ey [0 0 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] D
/EG [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1] D
/Tm [1 1 0.8 0.8 0.8 0.8 0.8 0.8 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1.3 0 0] D
/Bm [1 1 0.5 0.5 0.5 0.5 0.5 0.5 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1 0 0] D
/Lm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 0 0 2 0 0 0] D
/Rm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0] D
/EU [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0] D
/NO f D
/YY [[{()}1][{()}0][{()}2]] D
/ZZ [[{()}1][{()}0][{()}2]] D
/Ts EZ 0 get D
/TU f D
/Xp t D
/AU f D
/SN 0 D
/Cf f D
/Tp f D
/Fe f D
/TI 1 Ts mul D
/Fm 14 D
/xL 71 D
/xR 71 D
/yL 757 D
/yR 757 D
/Wl 454 F div D
/Wr 454 F div D
/hL 672 F div D
/hR 672 F div D
/FE {newpath Fm neg Fm M CP BB IW Fm add Fm L IW Fm add IL Fm add neg L CP BB
 Fm neg IL Fm add neg L closepath} D
/LA {PM 0 eq{/IW Wl D /IL hL D}{/IW Wr D /IL hR D}ie /W IW D /LL W D /LS W D
 TU PM 0 eq and{IW 56 F div add SA{Sf div}if 0 translate}
 {PM 0 eq{xL yL}{xR yR}ie translate F SA{Sf mul}if dup scale
 CS CF FS Cf{CA CL get VC}if /Bb f D}ie 0 0 M
 TF not Tc or {Cf{gsave SA{1 Sf div dup scale}if Cb VC FE fill grestore}if}if}D
/Pi 0 Ts mul D
/SG [0.8 1 1] D
/Ab 15 D
/J 0 D
/Tc f D
/NH 6 D
/Nf f D
/Pa f D
/LH 1.2 D
/XR f D
/Xr {/pN E D ( [p ) WB pN WB (] )WB} D
/Db [16#FF 16#FF 16#FF] D
/Dt [16#00 16#00 16#00] D
/eA f D
/Fi f D
/bT f D
/Lc t D
/Dl [16#00 16#00 16#00] D
/LX f D
/Br 0.25 D
/IA ([IMAGE]) D
/DS {/PF f D()WB NL NP()pop RC ZF} D
/Gb f D
/Mb t D
/Hc [16#00 16#00 16#00] D
/Bl 3 D
/MI -15.2 D
/DX (DRAFT) D
/Di 0 D
/Tt 113.385826771654 D
/Th {()2 Al()BR (
      ) 0 1 -1 H()4 FZ Ti ES()EH (
      ) 0 2 -1 H() ME 0 get join EH()Ea()BR()} D
/tH {()0 1 -1 H (Table of Contents) EH()} D
/FD 2 D
/Dy 2 D
/cD [16#F0 16#F0 16#F0] D
/FW 0.6 D
/FU [16#00 16#00 16#00] D
/ET {/RM f D /A0 0 D /PN SN D /OU t D /Ou t D /W IW D /LL W D D1
 Ms not TP and{Ip}if /TF f D} D

%-- End of variable part --
/MySymbol 10 dict dup begin
 /FontType 3 D /FontMatrix [.001 0 0 .001 0 0 ] D /FontBBox [25 -10 600 600] D
 /Encoding 256 array D 0 1 255{Encoding exch /.notdef put}for
 Encoding (e) 0 get /euro put
 /Metrics 2 dict D Metrics begin
  /.notdef 0 D
  /euro 651 D
 end
 /BBox 2 dict D BBox begin
  /.notdef [0 0 0 0] D
  /euro [25 -10 600 600] D
 end
 /CharacterDefs 2 dict D CharacterDefs begin
  /.notdef {} D
  /euro{newpath 114 600 moveto 631 600 lineto 464 200 lineto 573 200 lineto
   573 0 lineto -94 0 lineto 31 300 lineto -10 300 lineto closepath clip
   50 setlinewidth newpath 656 300 moveto 381 300 275 0 360 arc stroke
   -19 350 moveto 600 0 rlineto -19 250 moveto 600 0 rlineto stroke}d
 end
 /BuildChar{0 begin
  /char E D /fontdict E D /charname fontdict /Encoding get char get D
  fontdict begin
   Metrics charname get 0 BBox charname get aload pop setcachedevice
   CharacterDefs charname get exec
  end
 end}D
 /BuildChar load 0 3 dict put /UniqueID 1 D
end
definefont pop

/Cd {aload length 2 idiv dup dict begin {D} repeat currentdict end} D
/EX {EC cvx exec} D
/DU {} d
/BB {pop pop}d
/ie {ifelse} d
/E {exch} d
/M {moveto} d
/R {rmoveto} d
/L {lineto} d
/RL {rlineto} d
/CP {currentpoint} d
/SW {stringwidth} d
/GI {getinterval} d
/PI {putinterval} d
/Sg {setgray} d
/LW {setlinewidth} d
/S {dup () ne OU and{0 Co R AT 3 eq LB and HF not and A1 0 ne A2 0 ne or and
 {A2 0 32 A1 0 6 -1 roll awidthshow}{show}ie 0 Co neg R}{pop}ie
 OU PH 3 eq or{/Ms t D}if} D
/U {OU{gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M dup SW pop
 CJ 0 RL stroke grestore}if} D
/B {OU Br 0 gt and{CP Ts neg Ts .33 mul R gsave 0 Sg
 CP newpath Ts Br mul 0 360 arc closepath UI 2 mod 0 eq{stroke}{fill}ie
 grestore M CP E Ts Br 1 add mul sub E BB /Ms t D}if}D
/NP {Ms TP not or PA and OU and{TP{OR}if f1{mF k2 /mF E D /YC 0 D}if
 TP TU not PM 0 eq or and{showpage}if DU Ip TE not{LA}if 0.6 LW
 /CI 0 D /TP t D /Hs f D /hl 6 D /Hv 6 D /HI hi D /Ms f D}if Bs XO BO M} D
/Np {LE sub CP E pop gt PL 0 eq and{NP}if}D
/Ip {/PN PN 1 add D /Pn RM{1}{4}ie PN Ns D /PM PN SN sub 2 mod D} D
/GP {E dup 3 -1 roll get PN 1 add 2 mod get dup type /integertype eq
 {get 0 get}{E pop}ie}d
/Fc {dup 2 GP exec SW pop /S1 E D dup 1 GP exec SW pop /S2 E D 0 GP exec SW
 pop /S3 E D S1 0 gt{S2 2 mul S1 add S3 2 mul S1 add 2 copy lt{E}if pop}{0}ie
 S2 S3 add 2 copy lt{E}if pop IW .9 mul div dup 1 gt{1 E div}{pop 1}ie}D
/OR {Df{Sd}if tp not{gsave SA{1 Sf div dup scale}if Fe{Cf{FU VC}if FW LW
 1 setlinejoin FE stroke}if /YO {60 F div dup 40 gt{pop 40}if}D /cs CS D
 /cf CF D /CF 0 D /pf PF D /PF f D /Fn FN D /At AT D /AT 0 D /FN EF Hf 1 add
 get D Fz Fs FS ZZ Fc Fz mul Fs FS EU Hf 1 add get dup type /arraytype eq
 Cf and{VC}{pop 0 Sg}ie IW IL neg YO sub M ZZ 1 GP exec dup SW pop neg 0 R Sh
 0 IL neg YO sub M ZZ 0 GP exec Sh ZZ 2 GP exec dup SW pop IW E sub 2 div
 IL neg YO sub M Sh Fz Fs FS NO{/AW IW Pn SW pop sub D AW 2 div IL neg YO sub
 S1 0 gt S2 AW .45 mul gt or S3 AW .45 mul gt or{Fz 2 mul sub}if M Pn Sh}if
 EU Hf get dup type /arraytype eq Cf and{VC}{pop 0 Sg}ie YY Fc /FN EF Hf get D
 Hz mul HS FS IW YO M YY 1 GP exec dup SW pop neg 0 R Sh 0 YO M YY 0 GP exec Sh
 YY 2 GP exec dup SW pop IW E sub 2 div YO M Sh /FN Fn D /AT At D t Pb XO SZ
 SL get neg R /PF pf D grestore /CF 0 D cs cf FS}if}D
/Sh {dup () ne{CP Hz 4 div sub BB show CP CS add BB}{pop}ie}D
/Pb {/OU E D /Ou OU D /PB t D 0 0 M Ba{/Sa save D /BP t D /Fl t D RC /PL 0 D
 /PH 0 D /W IW D /LE IL .7 mul D /EO 0 D SI ZF /YA 0 D /BO 0 D /C1 () D
 BA 0 Ts neg R Bb{Xl Yl Xh Yh}if Bb CP Sa restore M
 {/Yh E D /Xh E D /Yl E D /Xl E D}if /Fl t D}if
 BL /OU t D /HM f D /Ou t D /PB f D} D
/Bs {/BP Ba not D}D
/reencodeISO {
 dup dup findfont dup length dict begin{1 index /FID ne{D}{pop pop}ie}forall
 /Encoding ISOLatin1Encoding D currentdict end definefont} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
[128/backslash 129/parenleft 130/parenright 141/circumflex 142/tilde
143/perthousand 144/dagger 145/daggerdbl 146/Ydieresis 147/scaron 148/Scaron
149/oe 150/OE 151/guilsinglleft 152/guilsinglright 153/quotesinglbase
154/quotedblbase 155/quotedblleft 156/quotedblright 157/endash 158/emdash
159/trademark]
aload length 2 idiv 1 1 3 -1 roll{pop ISOLatin1Encoding 3 1 roll put}for
/colorimage where{pop}{
 /colorimage {
  pop pop /Pr E D {/Cv Pr D /Gr Cv length 3 idiv string D 0 1 Gr length 1 sub
   {Gr E dup /i E 3 mul D Cv i get 0.299 mul Cv i 1 add get 0.587 mul add
    Cv i 2 add get 0.114 mul add cvi put}for Gr} image} D
}ie
/pdfmark where{pop}{userdict /pdfmark /cleartomark load put}ie
WF{FL{reencodeISO D}forall}{4 1 FL length 1 sub{FL E get reencodeISO D}for}ie
/Symbol dup dup findfont dup length dict begin
 {1 index /FID ne{D}{pop pop}ie}forall /Encoding [Encoding aload pop]
 dup 128 /therefore put D currentdict end definefont D

/SF {/CS E D SZ SL CS put FO SL FN put /YI CS LH neg mul D dup ST cvs ( ) join
 CS ST cvs join C1 E join ( NF ) join /C1 E D CS NF /Wf WF FN 0 gt or D
 /BW Wf{( ) SW pop}{0}ie D}D
/NF {/cS E D /cF E D cF 0 ge{FL cF get}{cF -1 eq{/Symbol}{/MySymbol}ie}ie
 findfont cS scalefont setfont} D
/FS {CF or /CF E D FR SL CF put CF CF 0 ge{FN 4 mul add}if E SF} D
/PC {SH /BP f D fin not GL not and{NL}if /HM t D /LL LS D} D
/BS {/TX E D Wf{/fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search{/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub 1 sub NN GI GL{SH cF cS OC
 2 copy cS ne E cF ne or{NF}{pop pop}ie}{PC /CW WH BW add D}ie
 /SC LK D}
 {GL{JC}if
 /CW CW WH add BW add D /HM t D}ie /GL f D /Ph f D
 /LK LK NW length 1 add add D}{pop exit}ie}loop
 /fin t D TX SC LK SC sub GI SH RT () ne{GL not{CC}if}if
 /LC TX length D /WH RT SW pop D CW WH add Hy{HC SW pop add}if LL gt
 {RT GL{SH cF cS OC 2 copy cS ne E cF ne or{NF}{pop pop}ie
 Hy{/Ph t D}if /LL LS D}{NL /LL LS D SH}ie}
 {RT PC Hy{CC}if /Ph Ph Hy or D}ie RT () ne{/GL t D /HM t D}if}
 {TX SW pop LL le{TX SH}{/NW () D 0 2 TX length 1 sub
 {/CW E D TX 0 CW GI dup SW pop LL gt{pop NW SH /HM t D NL/LL W XO sub MR sub D
 /CW CW 2 sub NN D /TX TX CW TX length CW sub GI D TX BS exit}
 {/NW E D}ie}for}ie}ie /HM t D}D
/CC {C0 length 0 gt{JC}if /C0 [C1 L1 YA YB Mf NS NB TB AF Bw] D
 /C1 () D /L0 L1 D /YA 0 D /YB 0 D /Mf 0 D /NS 0 D /NB 0 D}D
/JC {C0 aload length 0 gt{pop pop pop NB add /NB E D NS add /NS E D
 dup Mf gt{/Mf E D}{pop}ie dup YB gt{/YB E D}{pop}ie
 dup YA gt{/YA E D}{pop}ie pop C1 join /C1 E D /C0 [] D}if}D
/OC {C0 length 0 gt{C1 L1 L0 sub YA YB Mf NS NB TB AF Bw GL C0 aload pop
 /Bw E D /AF E D /TB E D /NB E D /NS E D /Mf E D /YB E D /YA E D /C0 [] D
 /L1 E D /C1 E D Ph{HC SH}if NL /GL E D /Bw E D /AF E D /TB E D /NB E D /NS E D
 /Mf E D /YB E D /YA E D /L1 E D /LL W L1 sub XO sub MR sub WH sub D /CW 0 D
 C1 E join /C1 E D}if}D
/BT {/LB t D dup length string copy RS dup dup () ne E ( ) ne and
 {/CI 0 D /LS LL D /LL W L1 sub XO sub MR sub D BS}
 {dup ( ) eq{/GL f D}if dup () eq L1 0 eq or{pop}{SH /BP f D /Ph f D}ie}ie
 /LB f D} D
/BL {CP E pop XO E M} D
/NL {JC /GL f D /SK W XO sub MR sub L1 sub TB{Bw add}if D
 /YA LF{Mf HM Fl not and PF or{LH mul}if}{0 /LF t D}ie YA 2 copy lt{E}if pop D
 C1 () ne{/FB YB Mf SA{Sf mul}if 4 div 2 copy lt{E}if pop D}if Fl{/Ya YA D}if
 CP E pop YA sub YB sub LE neg lt Fl not and PB not and{NP}if NT TL BL
 OU PF not and PB or{/RE L1 TB{Bw sub}if
 W XO sub MR sub div YA YB add LE BO add div 2 copy lt{E}if pop D
 RE 1 gt{BL 1 RE div dup scale}if}if
 AT 2 le{SK AT mul 2 div YA neg R}if
 AT 3 eq{0 YA neg R TB{/NB NB 1 sub D /NS NS 1 sub D}if /NB NB 1 sub NN D
 /A3 NS 6 mul NB add D NS NB add 0 eq
  {/A1 0 D /A2 0 D}
  {NS 0 eq{/A1 SK NB div dup J gt{pop 0}if D /A2 0 D}{J A3 mul SK lt
   {/A1 J D /A2 SK J NB mul sub NS div dup Ab gt{/A1 0 D pop 0}if D}
   {/A1 SK A3 div D /A2 A1 6 mul D}ie}ie}ie /A1 A1 NN D /A2 A2 NN D}if
 AT 4 eq{0 YA neg R PH 2 le{PD 0 lt{/PD L1 D}if PD M1 gt{/M1 PD D}if
 L1 PD sub M2 gt{/M2 L1 PD sub D}if}{DV ID 1 sub get 0 ge{Lo 0 R}if}ie}if
 F0 cF ne Cs cS ne or{F0 Cs NF}if
 /ms Ms D /Ms f D CP FB sub
 C1 cvx exec XO EO sub L1 add TB{BW sub}if dup LM gt{/LM E D}{pop}ie
 PH 0 eq PH 4 eq or Ms and{HF not{/PO t D /AH t D}if
 BB CP YA add E AT 3 eq LB and{A1 sub}if TB{BW sub}if E BB}
 {pop pop}ie Ms HM PH 3 eq and or{/BP f D /Fl f D}if
 /Lo 0 D /L1 0 D /F0 cF D /Cs cS D BP not{0 YB NN neg R}if
 OU f1 and mF not and{k2 /f1 f D}if
 OU PF not and PB or{RE 1 gt{RE dup scale}if}if /Ms ms Ms or D
 /C1 AF{(Cp )}{()}ie D /YA 0 D /YB 0 D BL
 AT 4 eq LB not and PH 3 ge and
 {ID DV length lt{DV ID get dup 0 ge{DO E sub /Lo E D /L1 Lo D}{pop}ie
 /ID ID 1 add D}if}if /T t D CD{/LN LN 1 add D PD}if
 /PD -1 D /NS 0 D /NB 0 D /TB f D /Ph f D /Mf 0 D /HM f D} D
/RS {/TM E D /CN 0 D TM{10 eq{TM CN ( ) PI}if /CN CN 1 add D}forall
 /CN 0 D /BK HM EN and{0}{1}ie D TM
 {dup 32 ne{TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq{TM CN 32 put /CN CN 1 add D}if /BK 1 D}ie}forall
 TM 0 CN GI dup dup () ne E ( ) ne and
 {dup CN 1 sub get 32 eq{/EN f D}{/EN t D}ie}if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI}d
/WR {(\n) search{dup () ne BP not or
 {Li 4 le CP E pop YI Li mul add LE add 0 lt and PL 0 eq and{NP}if
 SH NL pop /Li Li 1 sub D WR}{pop pop WR}ie}{SH}ie /CI 0 D /BP f D} D
/SH {dup dup () ne E ( ) ne and PF or CS Mf gt and{/Mf CS D}if
 T not Wf and{( ) E join /T t D}if dup BP{/MF CS D}if
 AT 3 eq{2 copy length dup 0 gt{/NB E NB add D
 {( ) search{/NS NS 1 add D pop pop}{pop exit}ie}loop}{pop pop}ie}if
 CD PD 0 lt and{dup DC search{SW pop /PD E L1 add D pop pop}{pop}ie}if
 0 Np dup SW pop L1 add /L1 E D dup () ne
 {C1 (\() join E join (\)) join AU AF and UF or Wf and{( U ) join}if
 sF{( s ) join}if ( S ) join
 /C1 E D dup length 1 sub get 32 eq /TB E D /Bw BW D}{pop pop}ie} D
/BG {AI LG BC add add 0 eq} D
/ON {OU{Ty AR AI NN get dup 1 add Ln Ns Ty 2 mod 0 eq{(.  )}{(\)  )}ie join
 dup SW pop neg 0 R CP E 0 lt{0 E M}{pop}ie CP BB show /Ms t D}if} D
/Ln {AR AI 3 -1 roll put}D
/SP {dup CI lt BP not and{dup CI sub 0 E R /CI E D}{pop}ie} D
/BN {PF{WR /HM f D}{BT NL}ie} D
/NN {dup 0 lt{pop 0}if} D
/h {(h) HI ST cvs join cvx exec dup 1 get E Nf{0 get E join}{pop}ie} D
/H {/fn FN D /Hi E 1 add D 1 sub /HL E D /H2 HL 2 add D /GS EZ H2 get D
 E Tm H2 get GS mul BE dup 0 gt{1 sub}{pop EG H2 get dup 0 lt{pop AT}if}ie NA
 WW Np /SL SL 1 add D /FN EF H2 get D GS Ey H2 get FS
 EU H2 get Sc Hs not HL Hl lt and Hs HL hl lt and or Hi 0 eq or
 {/HI Hi D /Hs t D /hl HL D /Hv HL D}if HL Hl lt{/hi Hi D}if
 Nf HI 0 gt and{(h) Hi ST cvs join cvx exec 0 get WB}if
 /HF t D /AH f D /PO f D} D
/EH {Bm H2 get GS mul BE OA /SL SL 1 sub NN D /CF 0 D /FN fn D
 SZ SL get FR SL get FS /HF f D /GS Ts D ()Ec} D
/P {E PF{WR}{PO{EP}{BN}ie Ts 4 mul Np AE not{Tm 0 get Ts mul neg SP}if
 dup 0 ge AH and{Pi Pd}if}ie 1 sub dup 0 lt{pop AV AL get}if /AT E D /PO t D} D
/EP {PF{WR}{BN Ts 4 mul Np}ie AE not{Bm 0 get Ts mul neg SP}if
 /AT AV AL get D /PO f D} D
/BE {E PO{EP}{BN}ie Ts 4 mul Np neg SP} D
/HR {/Aw W EO sub D /RW E dup 0 gt{Aw mul}{neg}ie dup Aw gt{pop Aw}if D /RZ E D
 E BN Ts neg SP 1 sub 2 div Aw RW sub mul EO add CP E pop M PF{0 Ps neg R}if
 0 Np OU{gsave RZ LW Cf{Hc VC}{0 Sg}ie CP BB RW 0 RL CP BB stroke grestore}if
 /CI 0 D /BP f D PF not{Ts neg SP}if /Ms t D} D
/AD {I NL EG 14 get dup 0 lt{pop AT}if NA /AE t D Tm 14 get Ts mul neg SP
 Cf{EU 14 get dup -1 eq{pop CA CL get}if Sc}if} D
/DA {BN ()ES OA /AE f D ()Ec Bm 14 get Ts mul neg SP} D
/PR {/MW E D /Li E D Tm 1 get Ps mul BE 0 NA /FN Fp D /PF t D SI /SL SL 1 add D
 /CF 0 D Ps CS mul Ts div MW WC mul CS mul Ts div dup LL gt PL 0 eq and
 {LL div div}{pop}ie Ey 1 get FS CP E pop LE add YI neg div cvi dup Li lt
 AH and{4 lt YI Li mul 5 mul LE add 0 gt or PL 0 eq and{NP}if}{pop}ie
 EU 1 get Sc /GS Ps D}D
/RP {WR NL () /PF f D SI /FN 0 D ES Bm 1 get Ps mul neg SP OA /GS Ts D} D
/SI {/XO Lm 15 get BC NN mul Lm 16 get AI UI sub NN mul add
 Lm 17 get UI NN mul add Lm 20 get LG NN mul add Ts mul
 PF{Lm 1 get Ps mul add}if EO add D
 /MR Rm 15 get BC NN mul Rm 16 get AI UI sub NN mul add
 Rm 17 get UI NN mul add Rm 20 get LG NN mul add Ts mul
 PF{Rm 1 get Ps mul add}if D /LL W XO sub MR sub D} D
/DT {/cC E D BN /LG LG 1 sub D SI /LG LG 1 add D WW 2 div Np BL} D
/DD {WB Cc 0 eq cC 0 eq and L1 0 eq or Lm 20 get Ts mul L1 sub TB{BW add}if
 Ts 2 div lt or NL /LF E D SI BL /cC 0 D} D
/DL {Dc LG Cc put /Cc E D BG{Tm 18 get Ts mul BE}{BN}ie /LG LG 1 add D BL} D
/LD {BN LG 0 gt{/LG LG 1 sub D}if /Cc Dc LG get D SI
 BG{()Bm 18 get Ts mul BE}if BL} D
/UL {BG{Tm 17 get Ts mul BE}{BN}ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI BG{()Bm 17 get Ts mul BE}if BL} D
/OL {E BG{Tm 16 get Ts mul BE}{BN}ie TR AI NN Ty put /Ty E D NR AI NN 1 put
 /AI AI 1 add D SI BL 1 Ln} D
/LO {BN /AI AI 1 sub D /Ty TR AI get D SI BG{()Bm 16 get Ts mul BE}if BL} D
/LI {E BN -1 SP /BP f D /CI 0 D 0 Np NR AI 1 sub NN get 1 eq
 {dup dup 0 gt E 4 le and{/Ty E D}{pop}ie
 /L1 L1 Ty AR AI NN get Ns SW pop XO sub dup 0 lt{pop 0}if add D ( ON )}
 {pop ( B )}ie C1 E join /C1 E D CS Mf gt{/Mf CS D}if BL} D
/BQ {Tm 15 get Ts mul BE /BC BC 1 add D SI BL} D
/QB {Bm 15 get Ts mul BE /BC BC 1 sub D SI BL} D
/Al {E EP 1 sub dup 0 lt{pop AV AL get}if NA} D
/Ea {EP OA} D
/WB {PF{WR}{BT}ie} D
/F1 {WB /FN 0 D CS 0 FS} D
/F2 {WB /FN WI D CS 0 FS} D
/HY {/Hy t D WB /Hy f D} D
/YH {WB} D
/A {/LT E D LT 1 eq{/RN E D}if /Lh E D WB /C1 C1 ( Cp ) join D
 Lc AF not and{Cl Sc}if /AF t D} D
/EA {Lc AF and{Ec}{WB}ie TL Pa AF and Lh 0 ne and
 {( \() Lh join (\)) join /AF f D WB}if /AF f D} D
/TL {C1 ( Tl ) apa /C1 E D} d
/apa {AF OU and Lh 0 ne LT 1 eq or and{LT 1 eq{RN ( /) E ST cvs join}
 {(\() Lh join (\)) join}ie E join join}{pop}ie} d
/Cp {/Xc CP /Yc E D D} D
/SS {Cf{dup 0 ge{EU E get dup -1 eq{pop CA CL get}if}{pop CA CL get}ie Sc}
 {pop}ie SZ SL get /SL SL 1 add D} D
/I {WB 8 SS 1 FS} D
/EM {WB 8 SS /CF CF 1 xor D 0 FS} D
/BD {WB 9 SS 2 FS} D
/TT {WB 10 SS /FN Fp D 0 FS} D
/KB {WB 11 SS /FN Fp D 2 FS} D
/CT {WB 12 SS 1 FS} D
/SM {WB 13 SS /FN Fp D 0 FS} D
/Q {/QL QL 1 add D QO QL 2 mod get La get join WB} D
/EQ {QC QL 2 mod get La get join WB /QL QL 1 sub D} D
/RO {WB -1 SS /CF 0 D 0 FS} D
/SY {WB -1 SS -1 FS} D
/MY {WB -1 SS -2 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D /FN FO SL get D SZ SL get FR SL get FS ()Ec}D
/FZ {3 sub 1.2 E exp GS mul E WB TL /C1 C1 ( Cp ) join D /SL SL 1 add D 0 FS} D
/Ef {WB TL ()ES /C1 C1 ( Cp ) join D} D
/BZ {dup /Bf E D FZ}D
/Sc {dup -1 ne Cf and{/CL CL 1 add D dup 0 eq{pop [0 0 0]}if
 dup CA E CL E put VS ( VC ) join C1 E join /C1 E D}{pop}ie} D
/Ec {WB Cf{/CL CL 1 sub NN D CA CL get VS ( VC ) join C1 E join /C1 E D}if} D
/VS {dup type /arraytype eq{([) E {ST cvs join ( ) join}forall (]) join}if} D
/VC {{255 div}forall setrgbcolor} D
/Sl {dup type /integertype ne{Ds}if /La E D WB}d
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SE {WB /sF t D} D
/XE {WB /sF f D} D
/sM {/C1 C1 ( k1 ) join D}d
/eM {/C1 C1 ( k2 ) join D}d
/k1 {/YC CP E pop Ts add D /mF t D /f1 t D}d
/k2 {gsave 3 LW -9 CP E pop Ts 0.2 mul sub M -9 YC L stroke grestore /mF f D}d
/Ac {/AC E D WB}d
/Ca {eA{( \()join AC join(\) )join}if WB}d
/s {OU{gsave 0 CS .25 mul R dup SW pop CJ 0 RL stroke grestore}if}D
/CJ {AT 3 eq LB and{E dup dup length 1 sub A1 mul E
 {( ) search{pop pop E A2 add E}{pop exit}ie}loop 3 -1 roll add
 W CP pop sub 2 copy gt{E}if pop}if}D
/So {/Co E D} D
/SO {C1 Yo ST cvs join ( So ) join /C1 E D (j) SW pop 2 div Pd} D
/Se {E WB CS E div Pd}D
/Pd {dup type /stringtype eq{SW pop}if dup /L1 E L1 add D
 ST cvs ( 0 R ) join C1 E join /C1 E D} D
/Sp {0.35 CO} D
/Sb {-0.2 CO} D
/CO {OV Io Yo put /Yo E CS mul Yo add D /Io Io 1 add D -1.5 Io mul 3 add FZ SO
 CS Yo add dup YA gt{/YA E D}{pop}ie
 Yo neg dup YB gt{/YB E D}{pop}ie} D
/Es {ES /Io Io 1 sub NN D /Yo OV Io get D SO} D
/SB {/N2 0 D 0 1 NI{/N E D{IX N2 get 0 lt{/N2 N2 1 add D}{exit}ie}loop
 /K WS N get FC N get mul D /NY AY N2 get D /BV NY array D
 0 1 NY 1 sub{/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put /N2 N2 1 add D}for} D
/IC [{/MA E D /MB 0 D}{2 div /MA E D /MB MA D}{/MB E CS sub D /MA CS D}
 {pop /MA YS AB mul D /MB 1 AB sub YS mul D}{pop /MA 0 D /MB 0 D}] D
/IP {BV N get /N N 1 add D} D
/II {/K E D IX K get 0 lt{/EC E D}if /TY E D
 TY 4 eq{/Y E D /X E D}if TY 3 eq{/AB E D}if
 /XW AX K get D /YW AY K get D /IS SG IT K get get D /XS XW IS mul D
 /YS YW IS mul D YS IC TY get exec /MA MA Fl not{3 add}if D} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /ec EC D /BP f D /CI 0 D WB TL L1 xs add dup XO add MR add W gt
 {pop /ma ma Fl{3 add}if D NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {/L1 E D ma YA gt{/YA ma D}if mb YB gt{/YB mb D}if}ie /TB f D
 OU{CP E pop YS sub LE neg lt Fl not and PB not and{NP /YA ma D /YB mb D}if
 /BP f D ty ST cvs ( ) join IX k get 0 lt{(\() join ec join (\) ) join}if
 k ST cvs join ty 3 eq{AB ST cvs ( ) join E join}if
 ty 4 eq{X ST cvs ( ) join Y ST cvs join ( ) join E join}if C1 E join
 ( DI ) join FP 2 eq FP 1 eq AF and or{( FM ) join}if
 ( Il Cp ) apa /C1 E D /EN f D}if /HM t D /T f D} D
/DI {II /Xc CP /Yc E D D /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave
 TY 4 eq{OX X IS mul add OY FY add YS sub Y IS mul sub}
 {/FY YS D CP MB sub 2 copy /OY E D /OX E D}ie
 translate K2 0 ge{/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq{image}{f 3 colorimage}ie}
 {EX}ie grestore XS 0 R /Ms t D} D
/FM {gsave 0 Sg CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL
 XS neg 0 RL stroke grestore} D
/NA {/AT E D /AL AL 1 add D AV AL AT put} D
/OA {AL 0 gt{/AL AL 1 sub D /AT AV AL get D}if} D
/D1 {/BR {CP E pop E BN Mb{CP E pop eq{0 YI R}if}{pop}ie} D
 /Sn {OU{C1 E ST cvs join ( Ld ) join /C1 E D}{pop}ie} D} D
/D1 {/BR {BN} D /Sn {OU {C1 E ST cvs join ( Ld ) join /C1 E D} {pop} ie} D} D
/TC {/TF t D /ML 0 D HN{SW pop dup ML gt{/ML E D}{pop}ie}forall NP /RM RM not D
 RC /OU Tc D Ep /PN 0 D Ms not TP and{Ip}if /W IW ML sub Ts sub D
 /A0 0 D TH{/BR {( ) join BT} D /Sn {pop} D /Au () D}if} D
/TN {0 eq{E EA PF HF or not XR and{HN E get Xr}{pop}ie}
 {OU{Tn 0 ge{() BN}if /Tn E D}{pop}ie WB}ie} D
/NT {OU LB not and Tn 0 ge and{PL 0 eq{Ms not{CS CF FS}if CP dup
 /y E YA sub D W 9 sub CS -1.8 mul XO L1 add 2 add{y M (.) show}for
 HN Tn get dup SW pop IW E sub y M show CP BB M}if /Tn -1 D}if} D
/Ld {/DN E D HN DN Pn put [/View [/XYZ -4 Fl{PS}{CP YA add US E pop}ie null]
 /Dest DN ST cvs cvn /DEST pdfmark} D
/C {ND 1 eq{1 sub}if TI mul /XO E D NL Nf not{pop()}if 0 3 -1 roll 1 A} D
/OP {BP not{NP}if PN 2 mod 0 eq{/Ms t D NP}if}D
/Ep {Xp PN 2 mod 0 eq and OU and{/Pn (-) D showpage /PM 1 D LA}if}D
/Dg [73 86 88 76 67 68 77] D
/Rd [0 [1 1 0][2 1 0][3 1 0][2 1 1][1 1 1][2 2 1][3 3 1][4 4 1][2 1 2]] D
/Ns {/m E D /c E 32 mul D /j m 1000 idiv D /p j 12 add string D
 c 96 le m 0 gt and{c 32 le {/i 0 D /d 77 D /l 100 D /m m j 1000 mul sub D
  j -1 1 {pop p i d c add put /i i 1 add D}for
  4 -2 0 {/j E D /n m l idiv D /m m n l mul sub D /d Dg j get D
   n 0 gt {/x Rd n get D x 0 get -1 1 {pop p i d c add put /i i 1 add D}for
   p i x 1 get sub Dg x 2 get j add get c add put}if /l l 10 idiv D
  }for p 0 i GI}
  {/i ST length 1 sub D m {1 sub dup 0 ge{dup 26 mod c add 1 add
   ST i 3 -1 roll put 26 idiv dup 0 eq{pop exit}if}if /i i 1 sub D}loop
   ST i ST length i sub GI}ie}
 {m p cvs}ie} D
/US {matrix currentmatrix matrix defaultmatrix matrix invertmatrix
 matrix concatmatrix transform} D
/GB {Gb{US}if}D
/Tl {/Rn E D Xc CP pop ne{
 [/Rect [Xc 1 sub Yc cS 0.25 mul sub GB CP E 1 add E cS 0.85 mul add GB]
  /Subtype /Link /Border [0 0 Cf Lc and LX and AU or{0}{1}ie] Rn type
  /nametype eq {/Dest Rn}{/Action [/Subtype /URI /URI Rn] Cd}ie
  /ANN pdfmark}if} D
/Il {/Rn E D [/Rect [Xc Yc GB Xc XS add Yc YS add GB] /Subtype /Link
 /Border [0 0 0] Rn type /nametype eq{/Dest Rn}
 {/Action [/Subtype /URI /URI Rn] Cd}ie /ANN pdfmark} D
/XP {[{/Z Bz 2 div D Z 0 R Z Z RL Z neg Z RL Z neg Z neg RL Z Z neg RL
 Fi cH 1 eq and{fill}if} {Bz 0 RL 0 Bz RL Bz neg 0 RL 0 Bz neg RL
 Fi cH 1 eq and{fill}if} {0 -5 R Bz 0 RL 0 21 RL Bz neg 0 RL 0 -21 RL}]} D
/MS {/Sm E D WB}D
/O {BN()0 Sm BX} D
/BX {/Bt E D Bt 2 lt{/Ch E D CS 0.8 mul}{11 mul}ie W XO sub MR sub
 2 copy gt{E}if pop /HZ E D Bt 2 eq{Fi not{pop()}if ( )E join /Ft E D TT
 /PF t D /MW 1 D /Li 1 D /Fw Ft SW pop D Fw HZ gt{/HZ Fw 8 add D}if
 HZ ST cvs( )join}{WB Ch ST cvs( )join}ie L1 HZ add XO add MR add W gt{NL}if
 Bt 2 eq{Ft ES Fw neg HM{CS sub}if Pd}if Bt ST cvs join( Bx )join
 Bt 2 eq HM and{CS Pd}if C1 E join /C1 E D /L1 L1 HZ add D /T f D
 ( ) Pd /PF f D Bt 2 lt{YA CS .8 mul lt{/YA CS .8 mul D}if}
 {YB 5 lt{/YB 5 D}if YA 21 lt{/YA 21 D}if}ie /CI 0 D} D
/Bx {dup 2 eq{E /Bz E D}{E /cH E D /Bz CS .8 mul D}ie
 OU {gsave 0 Sg XP E get exec stroke grestore}{pop}ie Bz 0 R /Ms t D}D
/SD {FD 4 mul Dy add DZ NF newpath 0 0 M DX t charpath pathbbox
 3 -1 roll sub /DY E D E dup /X1 E D sub WM mul WX DY mul add WM DG mul E div
 /DF E D /DR WX DF mul DY mul WM div 2 div D} d
/Sd {gsave 0 IL Di mul neg translate IL IW atan Di 0 eq{neg}if rotate
 FD 4 mul Dy add DZ NF DR X1 sub DY 2 div neg M cD VC DX show grestore} d
/Pt {/tp t D Tp{NP /Pn (TP) D 0 Tt neg R Th BN NP Ep ET RC ZF}if /tp f D} D
/RC {/AI 0 D /LG 0 D /BC 0 D /UI 0 D /PF f D /Cc 0 D /cC 0 D /Dc 10 array D
 /NR [0 1 9{pop 0}for] D /La Ds D /AR 10 array D /TR 10 array D /AV 30 array D
 SI /AL -1 D /AT A0 D AT NA /OV 9 array D /Yo 0 D /Co 0 D /Io 0 D /Hy f D
 /Ph f D /CL -1 D Ct Sc}D
/ZF {/FR [0 1 30{pop 0}for] D /SZ [0 1 30{pop 0}for] D /FO [0 1 30{pop 0}for] D
 /SL 0 D /CF 0 D /FN 0 D 0 Ts SF}D
/QO [[(\234)(\233)(\253\240)(\232)(\273)(\253)][(')(`)(\253\240)(\231)(\273)(\253)]] D
/QC [[(\234)(\234)(\240\273)(\233)(\253)(\273)][(')(')(\240\273)(`)(\253)(\273)]] D
/Hf EF length 2 sub D
/Hz EZ Hf get D
/HS Ey Hf get D
/Fz EZ Hf 1 add get D
/Fs Ey Hf 1 add get D
/LE IL D
/Ps EZ 1 get D
/Fp EF 1 get D
/XO 0 D
/YI 0 D
/CI 0 D
/FP 0 D
/WW Ts 7 mul D
/Mf 0 D
/YA 0 D
/YB 0 D
/Cs Ts D
/GS Ts D
/F0 0 D
/NS 0 D
/NB 0 D
/N 0 D
/C0 [] D
/C1 () D
/Lo 0 D
/L1 0 D
/LM 0 D
/PH 0 D
/EC 0 D
/Lh 0 D
/LT 0 D
/CH 1 string D
/ST 16 string D
/CA 9 array D
/HC (\255) D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/sF f D
/AE f D
/AF f D
/BP t D
/CD f D
/PA t D
/GL f D
/T t D
/HF f D
/AH f D
/SA f D
/PB f D
/f1 f D
/mF f D
/OX 0 D
/OY 0 D
/FY 0 D
/EO 0 D
/FB 0 D
/PL 0 D
/Bw 0 D
/PD -1 D
/TP f D
/tp f D
/TH t D
/Ty 4 D
/Tn -1 D
/Fl t D
/LB t D
/PM 1 D
/Ms f D
/Ba f D
/Bb f D
/Hl 3 D
/hl 6 D
/Hv 6 D
/Hs f D
/HI 0 D
/hi 0 D
/PO t D
/TE f D
/LF t D
/BO 0 D
/Sm 1 D
/Bf 3 D
/A1 0 D
/A2 0 D
/Ds 1 D
/QL -1 D
/Cb Db D
/Ct Dt D
/Cl Dl D
[/Creator (html2ps version 1.0 beta5) /Author () /Keywords () /Subject ()
 /Title (MazBotV4 Helpers API) /DOCINFO pdfmark
/ND 16 D
/HN [1 1 290{pop (??)}for] D
/h0 [()(Table of Contents)] D
/h1 [(1\240\240)(MazBotV4 Helpers API)] D
/h2 [(2\240\240)(Data Structures)] D
/h3 [(3\240\240)(MazBotV4 Helpers API)] D
/h4 [(4\240\240)(Data Structure Index)] D
/h5 [(5\240\240)(MazBotV4 Helpers API)] D
/h6 [(6\240\240)(File List)] D
/h7 [(7\240\240)(MazBotV4 Helpers API)] D
/h8 [(8\240\240)(MazBotV4 Helpers API)] D
/h9 [(9\240\240)(MazBotV4 Helpers API)] D
/h10 [(10\240\240)(MazBotV4 Helpers API)] D
/h11 [(11\240\240)(MazBotV4 Helpers API)] D
/h12 [(12\240\240)(MazBotV4 Helpers API)] D
/h13 [(12.0.1\240\240)(- c -)] D
/h14 [(12.0.2\240\240)(- m -)] D
/h15 [(13\240\240)(MazBotV4 Helpers API)] D
/h16 [(13.0.1\240\240)(- c -)] D
/h17 [(13.0.2\240\240)(- e -)] D
/h18 [(13.0.3\240\240)(- m -)] D
/h19 [(14\240\240)(MazBotV4 Helpers API)] D
/h20 [(15\240\240)(helpers.h File Reference)] D
/h21 [(15.1\240\240)(Define Documentation)] D
/h22 [(15.2\240\240)(Enumeration Type Documentation)] D
/h23 [(15.3\240\240)(Function Documentation)] D
/h24 [(16\240\240)(MazBotV4 Helpers API)] D
/h25 [(17\240\240)(helpers.h)] D
/h26 [(18\240\240)(MazBotV4 Helpers API)] D
/h27 [(19\240\240)(MazBotHelpers_Cexplode_etc Documentation)] D
/h28 [(19.0.1\240\240)(0.0.7 28.08.2009)] D
/h29 [(20\240\240)(MazBotV4 Helpers API)] D
/h30 [(21\240\240)(CexplodeStrings Struct Reference)] D
/h31 [(21.1\240\240)(Detailed Description)] D
/h32 [(21.2\240\240)(Field Documentation)] D
/h33 [(22\240\240)(MazBotV4 Helpers API)] D
/h34 [(23\240\240)(MbotAtomic32 Struct Reference)] D
/h35 [(23.1\240\240)(Detailed Description)] D
/h36 [(23.2\240\240)(Field Documentation)] D
/h37 [(24\240\240)(MazBotV4 Helpers API)] D
/h38 [(25\240\240)(mbot_linkedList Struct Reference)] D
/h39 [(25.1\240\240)(Field Documentation)] D
/Hr [4 5 9 10 14 15 30 31 38 40 43 88 -89 89 90 94 -95 95 96 97 100 101
102 103 104 273 274 276 277 -278 278 279 280 281 282 283 284 285 286 287
288 289]D
/HV [1 1 1 1 1 1 1 1 1 1 1 1 2 3 3 1 2 3 3 3 1 1 2 2 2 1 1 1 1 2 3 1 1
2 2 1 1 2 2 1 1 2]D
/Cn [0 0 0 0 0 0 0 0 0 0 0 1 2 0 0 1 3 0 0 0 0 3 0 0 0 0 0 0 1 1 0 0 2
0 0 0 2 0 0 0 1 0]D
Hr length 0 gt{[/PageMode /UseOutlines /DOCVIEW pdfmark}if
/Hn 1 D
0 1 Hr length 1 sub{
 /Bn E D [Cn Bn get dup 0 gt{/Count E HV Bn get Bl ge{neg}if}{pop}ie
 /Dest Hr Bn get dup abs ST cvs cvn E 0 ge{(h)Hn ST cvs join cvx exec
 dup 1 get E Nf{0 get E join}{pop}ie /Hn Hn 1 add D}{()}ie
 /Title E dup length 255 gt{0 255 getinterval}if /OUT pdfmark}for
ZF /FN Fp D Ps 0 FS /WC Wf{( )}{<A1A1>}ie SW pop D
ET RC ZF
/Df f D
/R1 (http://teotilcan.net/svn/MazBot/generic/src/) D
/R2 (http://teotilcan.net/tracker/view_all_bug_page.php) D
/R3 (http://maz-programmersdiary.blogspot.com/) D
/TS {
 tables E get /table E D
 table aload pop /rdesc E D /cdesc E D /tdesc E D
 tdesc aload pop /capalg E D /caption E D /rules E D /frame E D /nfoot E D
  /nhead E D /ncol E D /nrow E D /border E D /twid E D /units E D /talign E D
  /flow E D /clear E D /tclass E D pop pop
 /w W D /eps 0.1 D /OU f D /PL 1 D
 /FN EF 21 get D EZ 21 get Ey 21 get FS
 0 1 1{
  /pass E D
  0 1 nrow{
   /irow E D
   /cells rdesc irow get 6 get D
   0 1 ncol{
    /icol E D
    /cell cells icol get D
    cell 0 ne{
     cell aload pop /ang E D /CB E D pop pop pop
     /DV E D /bot E D /top E D /right E D /left E D /nowrap E D /valign E D
     /dp E D /align E D /rspan E D /cspan E D /cclass E D /ctype E D /cmax E D
     /cmin E D /proc E D
     rspan 0 eq{/rspan nrow irow sub 1 add D}if
     cspan 0 eq{/cspan ncol icol sub 1 add D}if
     pass 0 eq cspan 1 eq and pass 1 eq cspan 1 gt and or{
      /W 1e5 D /LL W D /PH 1 D
      ctype 1 eq{() BD}if
      RC align NA
      AT 4 eq{/CD t D /DC dp D /LN 0 D /M1 0 D /M2 0 D}{/CD f D}ie
      0 0 M /LM 0 D proc exec BN
      AT 4 eq{
       LN array astore cell 15 3 -1 roll put
       cdesc icol get dup dup 5 get M1 lt{5 M1 put}{5 get /M1 E D}ie
       dup 6 get M2 lt{6 M2 put}{6 get /M2 E D}ie
       /LM M1 M2 add D
      }if
      /CD f D
      ang 0 ne{/LM CP E pop neg D}if
      /thiswid LM left add right add eps add D
      /oldmin 0 D /oldmax 0 D
      0 1 cspan 1 sub{
       icol add cdesc E get dup 2 get /oldmax E oldmax add D
       1 get /oldmin E oldmin add D
      }for
      thiswid oldmax ge{
       0 1 cspan 1 sub{
        icol add cdesc E get dup 2 E 2 get oldmax 0 eq
         {pop thiswid cspan div}{thiswid mul oldmax div}ie
        put
       }for
      }if
      nowrap 1 eq{
       thiswid oldmin ge{
        0 1 cspan 1 sub{
         icol add cdesc E get dup 1 E 1 get oldmin 0 eq
          {pop thiswid cspan div}{thiswid mul oldmin div}ie
         put
        }for
       }if
      }{
       /W 0 D /LL W D /PH 2 D
       ctype 1 eq{() ES () BD}if
       0 0 M /LM 0 D RC proc exec BN
       /thiswid LM left add right add eps add D
       thiswid oldmin ge{
        0 1 cspan 1 sub{
         icol add cdesc E get dup 1 E 1 get oldmin 0 eq
          {pop thiswid cspan div}{thiswid mul oldmin div}ie
         put
        }for
       }if
      }ie
      ctype 1 eq{() ES}if
     }if
    }if
   }for
  }for
 }for
 /tmin 0 D /tmax 0 D
 0 1 ncol{
  cdesc E get dup 1 get E 2 get 2 copy gt{pop dup}if
  tmax add /tmax E D tmin add /tmin E D
 }for
 twid 0 lt{twid neg IW gt{IW neg}{twid}ie /twid E D}if
 tdesc 0 twid neg tmin 2 copy lt{E}if pop put
 tdesc 1 twid neg tmax 2 copy lt{E}if pop put
 /W w D /LL W D /OU t D /PH 0 D /PL 0 D
} D
/PT {
 /PL PL 1 add D
 tables E get /table E D Tm 21 get Ts mul BE
 PL 2 ge{save}if
 /SL SL 1 add D /FN EF 21 get D EZ 21 get Ey 21 get FS
 table aload pop /rdesc E D /cdesc E D /tdesc E D
 tdesc aload pop /capalg E D /caption E D /rules E D /frame E D /nfoot E D
  /nhead E D /ncol E D /nrow E D /border E D /twid E D /units E D /talign E D
  /flow E D /clear E D /tclass E D /tmax E D /tmin E D
 /w W D /xo XO D /mr MR D /ll LL D /lg LG D /ai AI D /bc BC D /nr NR D /ar AR D
 /tr TR D /ui UI D /ph PH D /a0 A0 D /pf PF D /at AT D /av AV D /al AL D
 /Le LE D /la La D
 talign 0 lt{/talign AL 0 gt{AV AL get}{A0 2 le{A0}{0}ie}ie D}if
 ph 1 eq ph 2 eq or{
  NL ph 1 eq{tmax}{tmin}ie dup XO add LM gt{/LM E XO add D}{pop}ie LM E
 }{
  /PH 3 D /LE 1e5 D RC %ZF
  border 0 gt{/border 1 D}if
  /twidth 0 D /avail W xo sub D
  twid 0 eq{0 1 ncol{cdesc E get dup 2 get E 3 get dup 0 gt{div neg dup twid lt
   {/twid E D}{pop}ie}{pop pop}ie}for}if
  /twid twid dup 0 lt{neg avail 2 copy gt{E}if pop}{avail mul}ie D
  /OK t D 0 1 ncol{cdesc E get dup 1 get E 3 get twid mul gt{/OK f D}if}for
  0 1 ncol{
   cdesc E get dup 1 get /colmin E D dup 3 get /cwid E twid mul D dup
   tmax avail le{2 get}if
   tmin avail le tmax avail gt and{
    dup 2 get E 1 get dup 3 1 roll sub avail tmin sub mul tmax tmin sub div add
   }if
   tmin avail gt{1 get}if
   0 E colmin cwid lt OK and{pop cwid}if dup /twidth E twidth add D put
  }for
  /OU f D CP
  tmin twid le{
   0 1 ncol{cdesc E get dup 0 get twidth div twid mul 0 E put}for
   /twidth twid D
  }if
  CP printcap CP E pop sub /caphig E D pop
  0 1 1{
   /pass E D
   0 1 nrow{
    /irow E D
    /cells rdesc irow get 6 get D
    0 1 ncol{
     /icol E D
     /cell cells icol get D
     cell 0 ne{
      cell aload pop /ang E D /CB E D pop pop pop
      /DV E D /bot E D /top E D /right E D /left E D /nowrap E D /valign E D
      /dp E D /align E D /rspan E D /cspan E D /cclass E D /ctype E D /cmax E D
      /cmin E D /proc E D
      rspan 0 eq{/rspan nrow irow sub 1 add D}if
      cspan 0 eq{/cspan ncol icol sub 1 add D}if
      /W 0 D
      0 1 cspan 1 sub{icol add cdesc E get 0 get /W E W add D}for
      pass 0 eq rspan 1 eq and pass 1 eq rspan 1 gt and or{
       ctype 1 eq{() BD}if
       /W W left sub right sub D /XO 0 D /EO 0 D SI
       /A0 align D RC align NA
       AT 4 eq{
        /DC dp D /DO 0 D /ID 1 D
        0 1 DV length 1 sub{DV E get dup DO gt{/DO E D}{pop}ie}for
        /Lo DO DV 0 get sub D /L1 Lo D
       }if
       0 0 M /BP t D /Fl t D /MF 0 D /FB 0 D
       proc exec T not{/CI 0 D}if BN 0 FB neg R MF 0 eq{/MF CS D}if
       CP /thishig E neg bot add top add CI add D pop
       ang 0 ne{/thishig LM bot add top add D}if
       cell 16 MF put cell 17 Ya put cell 18 thishig put
       valign 4 eq{
        /below thishig Ya sub D
        rdesc irow get dup dup 4 get Ya lt
         {4 Ya put}{4 get /Ya E D}ie
        dup 5 get below lt{5 below put}{5 get /below E D}ie
        /thishig Ya below add D
       }if
       ctype 1 eq{()ES}if
       /oldhig 0 D
       0 1 rspan 1 sub{
        irow add rdesc E get 0 get /oldhig E oldhig add D
       }for
       thishig oldhig ge{
        0 1 rspan 1 sub{
         irow add rdesc E get dup 0 E 0 get oldhig 0 eq
          {pop thishig rspan div}{thishig mul oldhig div}ie
         put
        }for
       }if
      }if
     }if
    }for
   }for
  }for M RC %ZF
  /thight 0 D /racc 0 D /maxh 0 D /brk 0 D /rbeg nhead nfoot add D
  0 1 nrow{
   rdesc E get dup 0 get dup /thight E thight add D
   brk 0 eq{/racc E D}{/racc E racc add D}ie
   racc maxh gt{/maxh racc D}if 2 get /brk E D
  }for
  ph 3 ge{thight caphig add E}if
  ph 0 eq ph 4 eq or{
   /PH 4 D /LE Le D /OU Ou D /yoff 0 D /headsz 0 D
   0 1 nhead 1 sub{rdesc E get 0 get headsz add /headsz E D}for
   /footsz 0 D
   0 1 nfoot 1 sub{rdesc E nhead add get 0 get footsz add /footsz E D}for
   /ahig LE BO add MI add D /maxh maxh headsz add footsz add D
   /thight thight headsz add footsz add D
   tmin avail gt maxh ahig gt or
    {/Sf avail tmin div dup ahig maxh div gt{pop ahig maxh div}if D /SA t D}
    {/Sf 1 D}ie
   tclass 1 eq thight LE 15 sub gt and
    {/SA t D LE 15 sub thight div dup Sf lt{/Sf E D}{pop}ie}if
   SA{Sf Sf scale /ll ll Sf div D /xo xo Sf div D /LE LE Sf div D
    /mr mr Sf div D /BO BO Sf div D /ahig ahig Sf div D}if
   nhead nfoot add getwid
   LE CP E pop add capalg 0 eq{caphig sub}if
   bT{f}{dup thight lt thight ahig lt and}ie
   E headsz sub footsz sub rwid lt or{NP}if
   capalg 0 eq{printcap -8 SP}if
   CP /ycur E D pop
   printhead
   rbeg 1 nrow{/row E D row
    getwid
    ycur yoff add rwid sub footsz sub LE add 0 lt
    {nfoot 0 gt{printfoot}if Tf NP /rbeg irow1 D
     Ba{MI /MI MI SA{Sf div}if D MI SP /MI E D}if
     CP /ycur E D pop /yoff 0 D printhead}if
    irow1 printrow
   }for
   printfoot /row row 1 add D Tf
   0 ycur yoff add M
   capalg 1 eq{/EO 0 D SI -3 SP printcap}if
   Sf 1 lt{1 Sf div dup scale /ll ll Sf mul D /xo xo Sf mul D /LE LE Sf mul D
    /mr mr Sf mul D /BO BO Sf mul D /SA f D}if
   /EO 0 D
  }if
 }ie
 /W w D /XO xo D /MR mr D /LL ll D /LG lg D /AI ai D /BC bc D /NR nr D /AR ar D
 /TR tr D /UI ui D /PH ph D /A0 a0 D /PF pf D /AT at D /AV av D /AL al D
 /La la D
 /SL SL 1 sub NN D /CF 0 D /FN 0 D SZ SL get FR SL get FS Wf not{()F2}if
 PL 2 ge{Ms E restore Ms or /Ms E D PH 1 eq PH 2 eq or
  {/LM E D}if PH 3 ge{/CI 0 D NL 0 E neg R}if
 }if
 /PL PL 1 sub D /CI 0 D /BP f D /PO f D () Bm 21 get Ts mul BE BL %CF CS SF
} D
/printcap{
 capalg 0 ge{
  SA{/W w Sf div D}
   {talign 1 eq{/XO xo ll twidth sub 2 div add D}if
    talign 2 eq{/XO xo ll twidth sub add D}if
    /W XO twidth add D
   }ie /XO xo D /LL W XO sub MR sub D
  /PA f D /Fl capalg 0 eq D
  1 NA BL caption exec BN OA /PA t D
 }if
} D
/getwid{
 /irow1 E D
 /irow2 irow1 D
 /rwid 0 D
 {rdesc irow2 get dup 0 get rwid add /rwid E D 2 get 0 eq
  {exit}{/irow2 irow2 1 add D}ie
 }loop
} D
/printrow{
 /xoff ll twidth PL 2 ge{Sf div}if sub talign mul 2 div D
 /xleft xoff xo add D
 /irow E D
 /cells rdesc irow get 6 get D
 0 1 ncol{
  /icol E D
  /cell cells icol get D
  cell 0 ne{
   cell aload pop /ang E D /CB E D /cvsize E D /above E D /fontsz E D
   /DV E D /bot E D /top E D /right E D /left E D /nowrap E D /valign E D
   /dp E D /align E D /rspan E D /cspan E D /cclass E D /ctype E D /cmax E D
   /cmin E D /proc E D
   rspan 0 eq{/rspan nrow irow sub 1 add D}if
   cspan 0 eq{/cspan ncol icol sub 1 add D}if
   /width 0 D
   0 1 cspan 1 sub{icol add cdesc E get 0 get /width E width add D}for
   /rhight rdesc irow get 0 get D
   /hight rhight D
   1 1 rspan 1 sub{irow add rdesc E get 0 get /hight E hight add D}for
   /W xo xoff add width add right sub D
   ang 0 ne{/W xo xoff add hight add right sub D}if
   /EO xo xoff add left add D SI
   Cf{
    gsave CB VC xo xoff add ycur yoff add M
    0 hight neg RL width 0 RL 0 hight RL width neg 0 RL fill
    grestore
   }if
   ctype 1 eq{() BD}if
   /A0 align D RC
   AT 4 eq{
    /DC dp D /ID 1 D /DO cdesc icol get 5 get D /Lo DO DV 0 get sub D /L1 Lo D
   }if
   ang 0 ne{
    gsave ang 90 eq
     {xoff ycur add hight cvsize sub 2 div sub ycur hight sub xoff sub}
     {xoff ycur sub width add hight cvsize sub 2 div add ycur xoff add}ie
    translate ang rotate
   }if
   valign 3 le{0 ycur yoff add top sub
    hight cvsize sub valign 1 sub mul 2 div sub M}
   {0 ycur yoff add top sub above add rdesc irow get 4 get sub M}ie
   /PA f D /BP t D /Fl t D
   BL proc exec BN
   ang 0 ne{grestore}if
   /PA t D
   ctype 1 eq{() ES}if
  }if
  /xoff xoff cdesc icol get 0 get add D
 }for
 /yoff yoff rhight sub D
} D
/printhead {0 1 nhead 1 sub{printrow}for} D
/printfoot {nhead 1 nhead nfoot add 1 sub{printrow}for} D
/Tf {
 OU{rules 2 ge{/yoff 0 D
   gsave 0 Sg
   [0 1 nhead 1 sub{}for rbeg 1 row 1 sub{}for nhead 1 nhead nfoot add 1 sub{}for]{
    /irow E D
    /xoff ll twidth PL 2 ge{Sf div}if sub talign mul 2 div D
    /cells rdesc irow get 6 get D
    0 1 ncol{
     /icol E D
     /cell cells icol get D
     cell 0 ne{
      /rspan cell 6 get D
      /cspan cell 5 get D
      rspan 0 eq{/rspan nrow irow sub 1 add D}if
      cspan 0 eq{/cspan ncol icol sub 1 add D}if
      /width 0 D
      0 1 cspan 1 sub{icol add cdesc E get 0 get /width E width add D}for
      /rhight rdesc irow get 0 get D
      /hight rhight D
      1 1 rspan 1 sub{irow add rdesc E get 0 get /hight E hight add D}for
      xo xoff add width add ycur yoff add M
      0 hight neg icol cspan add 1 sub ncol lt
       {cdesc icol 1 add get 4 get dup rules 3 le{1 eq}{pop t}ie
        {1 eq{0.8}{0.3}ie
        LW RL CP stroke M}{pop R}ie}{R}ie
      irow nhead nfoot add 1 sub ne nfoot 0 eq or
       {irow rspan add 1 sub nrow lt
       {rdesc irow rspan add get 3 get}{nfoot 0 eq{0}{1}ie}ie
       dup rules 2 mod 0 eq{1 eq}{pop t}ie
       {1 eq irow rspan add nhead eq or irow rspan add row eq nfoot 0 gt and or
        {0.8}{0.3}ie LW width neg 0 RL CP stroke M}{pop}ie}if
     }if
     /xoff xoff cdesc icol get 0 get add D
    }for
    /yoff yoff rhight sub D
   }forall
   grestore
   /Ms t D
  }if
  frame 1 gt{
   gsave
   1 LW 0 Sg
   xleft ycur M CP BB
   0 yoff frame 5 eq frame 7 ge or{RL}{R}ie
   twidth 0 frame 3 eq frame 4 eq or frame 8 ge or{RL}{R}ie CP BB
   0 yoff neg frame 6 ge{RL}{R}ie
   twidth neg 0 frame 2 eq frame 4 eq or frame 8 ge or{RL}{R}ie
   closepath stroke
   grestore
   /Ms t D
  }if
 }if
} D
/tables [[[0 0 0 0 0 -1 0 0 0 2 1 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Struct for Cexplode object )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Struct for 32bit wide integer type used in atomic operations )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()BR(\240\240C\240\240)BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()BR(\240\240M\240\240)BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 1 0 0.95 0 0 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()WB 7 Sn()EA()1 PT()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(\240\240\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()WB 8 Sn()EA()2 PT()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(\240\240\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(\240\240\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 1 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 12 1 A(helpers.h)12 0 TN TL()Ec /AF f D( )0 13 1 A([code])13 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 94 1 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 -1 H(Data Structures)EH()} 0 0 0 0 2 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
0
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(struct \240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Struct for 32bit wide integer type used in atomic operations.  )0 98 1 A(More...)98 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(struct \240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Struct for Cexplode object.  )0 99 1 A(More...)99 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(struct \240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 -1 H(Defines)EH()} 0 0 0 0 2 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
0
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(#define\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 37 1 A(CEXPLODE_LAST_ITEM)37 0 TN TL()Ec /AF f D(\240\240\2400xFFFFFFFF)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 -1 H(Enumerations)EH()} 0 0 0 0 2 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
0
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(enum \240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 39 1 A(ECexplodeRet)39 0 TN TL()Ec /AF f D( { )0 41 1 A(ECexplodeRet_InternalFailure)41 0 TN TL()Ec /AF f D( =  -666, 
)0 42 1 A(ECexplodeRet_InvalidParams)42 0 TN TL()Ec /AF f D( =  -667
 })} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 P(enumeration for Cexplodei's error return values )EP(
 )0 39 1 A(More...)39 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 -1 H(Functions)EH()} 0 0 0 0 2 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
0
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 57 1 A(Cexplode_removeCurrent)57 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Removes the previously returned piece.  )0 57 1 A()57 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 58 1 A(Cexplode_removeNth)58 0 TN TL()Ec /AF f D( \201int nro, )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Removes Nth piece from cexplode Must not be called before calling Cexplode If removed item is last piece, the "sepwasatend" flag will be set true! Note, you can use special CEXPLODE_LAST_ITEM define to remove the last item.  )0 58 1 A()58 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 50 1 A(Cexplode_getAmnt)50 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Get the amount of pieces in exploded object Must not be called before calling Cexplode.  )0 50 1 A()50 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D( \201const char *string, const char *delim, )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Explodes string to pieces according to delimiter. Result is stored in exp_obj and can be retrieved using functions below The results of explosion are stored in same order as they occurred in initial string, eg. if string "1 2 3 4" would be exploded with space \201" "\202 as delimiter, )0 51 1 A(Cexplode_getfirst\201\202)51 0 TN TL()Ec /AF f D( would return 1, )0 55 1 A(Cexplode_getNth\201\202)55 0 TN TL()Ec /AF f D( with n being 4, would return 4.  )0 46 1 A()46 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 56 1 A(Cexplode_nextexists)56 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Peeks if there's another result in exp_obj. Must not be called before calling Cexplode.  )0 56 1 A()56 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 55 1 A(Cexplode_getNth)55 0 TN TL()Ec /AF f D( \201int index, )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Retrieve's Nth exploded piece - first is first \201index starts from 1, not from 0\202 Updates internal iterator, IE following call to Cexplode_getnext will retrieve index+1th piece.  )0 55 1 A()55 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 51 1 A(Cexplode_getfirst)51 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Get's the first exploded piece. Same as Cexplode_getNth\2011,*exp_obj\202;.  )0 51 1 A()51 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Get's next piece. Returns NULL if no more pieces are around.  )0 54 1 A()54 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 52 1 A(Cexplode_getlast)52 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Gets last exploded piece.  )0 52 1 A()52 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(void\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 48 1 A(Cexplode_free)48 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Frees resources allocated by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( - BEWARE frees also splitted pieces.  )0 48 1 A()48 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(void\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 49 1 A(Cexplode_free_allButPieces)49 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Frees resources allocated by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( - does not free splitted pieces.  )0 49 1 A()49 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(size_t\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 53 1 A(Cexplode_getlentilllast)53 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Gets the amount of chars from the start of the original string to the beginning of last found delimiter.  )0 53 1 A()53 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 59 1 A(Cexplode_sepwasatend)59 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(returns 1 if last chars in original string were the separator - else returns 0  )0 59 1 A()59 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 47 1 A(Cexplode_concat)47 0 TN TL()Ec /AF f D( \201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *first, )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *second\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Concatenates two exp_objs into one. Modifies the first argument to contain new exp_obj. Does not modify second argument.  )0 47 1 A()47 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 83 1 A(mbot_ltrim)83 0 TN TL()Ec /AF f D( \201char *text, char trimchar\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(removes trimchars from the beginning of a string.  )0 83 1 A()83 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 84 1 A(mbot_rtrim)84 0 TN TL()Ec /AF f D( \201char *text, char trimchar\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(removes trailing trimchars from a string.  )0 84 1 A()84 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 82 1 A(mbot_lrtrim)82 0 TN TL()Ec /AF f D( \201char *text, char trimchar\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(removes trailing trimchars as well as trimchars from the beginning of a string.  )0 82 1 A()82 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 85 1 A(mbot_trimall)85 0 TN TL()Ec /AF f D( \201char *text, char trimchar\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(removes all trimchars from a string.  )0 85 1 A()85 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 86 1 A(MbotAtomic32Init)86 0 TN TL()Ec /AF f D( \201\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Creates 32bit atomic variable, compatible with mbot_atomic* operations.  )0 86 1 A()86 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(void\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 87 1 A(MbotAtomic32Uninit)87 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( **_this_\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Uninitializes )0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(. This must not be called when it is possible someone is using the variable.  )0 87 1 A()87 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 65 1 A(mbot_atomicGet)65 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Get the value atomically.  )0 65 1 A()65 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 60 1 A(mbot_atomicAdd)60 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic, unsigned int addition\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Increase value atomically - returns value before increment.  )0 60 1 A()60 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 62 1 A(mbot_atomicDec)62 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic, unsigned int decrement\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Decrease value atomically - returns value before decrement.  )0 62 1 A()62 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 63 1 A(mbot_atomicDecIfGreater)63 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic, unsigned int decrement, unsigned int cmp\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Decrease value atomically, if original value is greater than cmp. Returns original value. \201If returnval<cmp, no decrement occurred.  )0 63 1 A()63 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 64 1 A(mbot_atomicDecIfSmaller)64 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic, unsigned int decrement, unsigned int cmp\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Decrease value atomically, if original value is smaller than cmp. Returns original value. \201If returnval>cmp, no decrement occurred.  )0 64 1 A()64 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 66 1 A(mbot_atomicIncIfGreater)66 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic, unsigned int decrement, unsigned int cmp\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Increase value atomically, if original value is greater than cmp. Returns original value. \201If returnval<cmp, no increment occurred.  )0 66 1 A()66 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 67 1 A(mbot_atomicIncIfSmaller)67 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic, unsigned int decrement, unsigned int cmp\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Increase value atomically, if original value is smaller than cmp. Returns original value. \201If returnval>cmp, no increment occurred.  )0 67 1 A()67 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 61 1 A(mbot_atomicCAS)61 0 TN TL()Ec /AF f D( \201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *atomic, unsigned int old, unsigned int newval\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 78 1 A(mbot_ll_init)78 0 TN TL()Ec /AF f D( \201\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Initializes linked list for use - returns ptr to list head.  )0 78 1 A()78 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 76 1 A(mbot_ll_get_prev)76 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Gets previous list item. - returns previous item, or NULL if error occurred/first item given as param.  )0 76 1 A()76 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 77 1 A(mbot_ll_head_get)77 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Get the head of the list Head can be used to maintain the location of empty list.  )0 77 1 A()77 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 75 1 A(mbot_ll_get_next)75 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Get's next element - NULL if error occurred, or last element was provided as argument.  )0 75 1 A()75 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 73 1 A(mbot_ll_get_first)73 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Get's the first list element - returns first element or NULL if no elements stored, or if an error occurred.  )0 73 1 A()73 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 74 1 A(mbot_ll_get_last)74 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Gets the last element in list.  )0 74 1 A()74 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 68 1 A(mbot_ll_add)68 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this, void *data\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Adds item to list \201data\202. Does not do a copy of data. Any list item \201including head\202 can be used as _this.  )0 68 1 A()68 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 79 1 A(mbot_ll_release)79 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(removes given item from list - does not free memory.  )0 79 1 A()79 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 80 1 A(mbot_ll_safe_release)80 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this, void *data\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(removes list item which holds data pointed by data. Any list item can be given in _this. Does not free memory. Returns removed list entry, and user must call free upon entry and stored data.  )0 80 1 A()80 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(void *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 70 1 A(mbot_ll_dataGet)70 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Gets data stored to an entry - entry and data are left untouched.  )0 70 1 A()70 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(void *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 71 1 A(mbot_ll_dataSet)71 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this, void *data\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Sets data to an list,.  )0 71 1 A()71 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 81 1 A(mbot_ll_seek)81 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this, void *data, size_t datasize\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Searchs through the list and returns element in which the held data matches data specified in params.  )0 81 1 A()81 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 69 1 A(mbot_ll_copylist_wdata)69 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *old, size_t itemsize\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Copies given list and itemsize bytes of data from each container to new list, and returns a pointer to the copylist.  )0 69 1 A()69 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(void\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 72 1 A(mbot_ll_destroy)72 0 TN TL()Ec /AF f D( \201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( **_this\202)} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(Frees all entries from list, and destroys the list - does not free stored data. _this is NULLed upon return.  )0 72 1 A()72 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(#define CEXPLODE_LAST_ITEM\240\240\2400xFFFFFFFF
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(enum )0 39 1 A(ECexplodeRet)39 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 1 1 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()EM()WB 41 Sn()EA(ECexplodeRet_InternalFailure)ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()EM()WB 42 Sn()EA(ECexplodeRet_InvalidParams)ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int Cexplode )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(const char *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(string)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(const char *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(delim)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM(const)ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char *string pointer to C string being exploded )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM(const)ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char *delim pointer to C string used as delimiter for cutting original string )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, which will be filled to contain results of explosion. )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int Cexplode_concat )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(first)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(second)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 1 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*first pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( to be combined with another )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( object. This will contain new )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( object holding results for both of the original )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( objects. )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*second ointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( to be combined with another )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( object - this will not be modified during call. )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(void Cexplode_free )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(exp_obj )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(void Cexplode_free_allButPieces )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(exp_obj )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int Cexplode_getAmnt )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(char* Cexplode_getfirst )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(char* Cexplode_getlast )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(size_t Cexplode_getlentilllast )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(exp_obj )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(char* Cexplode_getnext )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(char* Cexplode_getNth )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(index)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 1 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM(int)ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(index index number of result to be retrieved. first is first \201index starts from 1, not from 0\202 )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int Cexplode_nextexists )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(exp_obj )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int Cexplode_removeCurrent )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(char* Cexplode_removeNth )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(nro)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 1 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM(int)ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(nro number of exploded piece to be removed from the )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( containing results )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(*exp_obj pointer to )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int Cexplode_sepwasatend )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(exp_obj)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 2 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB()EM()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D()ES(\240)} 0 0 0 0 1 1 0 (.) 1 0 1 1 1 1 0 0 0 0 Db 0 ]
[{()1 Sl()WB(exp_obj )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( type object, filled by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( )} 0 0 0 0 1 1 0 (.) 2 0 1 1 1 1 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicAdd )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(addition)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicCAS )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(old)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(newval)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicDec )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(decrement)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicDecIfGreater )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(decrement)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(cmp)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicDecIfSmaller )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(decrement)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(cmp)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicGet )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicIncIfGreater )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(decrement)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(cmp)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(unsigned int mbot_atomicIncIfSmaller )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(atomic)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(decrement)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(unsigned int\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(cmp)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_add )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(void *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(data)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_copylist_wdata )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(old)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(size_t\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(itemsize)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(void* mbot_ll_dataGet )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(void* mbot_ll_dataSet )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(void *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(data)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(void mbot_ll_destroy )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( **\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_get_first )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_get_last )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_get_next )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_get_prev )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_head_get )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_init )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_release )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_safe_release )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(void *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(data)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(* mbot_ll_seek )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(void *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(data)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(size_t\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(datasize)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int mbot_lrtrim )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(text)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(trimchar)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int mbot_ltrim )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(text)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(trimchar)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int mbot_rtrim )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(text)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(trimchar)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 2 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int mbot_trimall )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(text)ES(, 
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()}0 0 0 0 1 1 0(.)0 0 8 8 2 6 0 0 0 0 Db 0]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(char\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(trimchar)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\202)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 4 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* MbotAtomic32Init )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 5 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(void MbotAtomic32Uninit )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\201)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( **\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB( )EM(_this_)ES()} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(\240\202\240)} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
[{()1 Sl()WB(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 6 1 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 -1 H(Data Fields)EH()} 0 0 0 0 2 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
0
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 18 1 A(amnt)18 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(char **\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 28 1 A(strings)28 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(char *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 25 1 A(separator)25 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 26 1 A(sepwasatend)26 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 27 1 A(startedWdelim)27 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 21 1 A(index)21 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int )0 18 1 A(amnt)18 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int )0 21 1 A(index)21 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(char* )0 25 1 A(separator)25 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int )0 26 1 A(sepwasatend)26 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(int )0 27 1 A(startedWdelim)27 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(char** )0 28 1 A(strings)28 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 3 1 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 -1 H(Data Fields)EH()} 0 0 0 0 2 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
0
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(volatile unsigned int\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 29 1 A(value)29 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(sem_t\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 24 1 A(sem)24 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(\240)} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB(If non x86 arch is used, these atomic ops are dummies using semaphore.  )0 24 1 A()24 0 TN TL()Ec /AF f D()BR()} 0 0 0 0 1 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(sem_t )0 24 1 A(sem)24 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(volatile unsigned int )0 29 1 A(value)29 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 4 1 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0][0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB()0 2 -1 H(Data Fields)EH()} 0 0 0 0 2 1 0 (.) 2 0 0 0 0 0 0 0 0 0 Db 0 ]
0
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(struct )0 2 1 A(mbot_linkedList)EA( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 20 1 A(head)20 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(struct )0 2 1 A(mbot_linkedList)EA( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 22 1 A(next)22 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(struct )0 2 1 A(mbot_linkedList)EA( *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 23 1 A(prev)23 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
[0 0 0 0 0 0 [[{()1 Sl()WB(void *\240)} 0 0 0 0 1 1 2 (.) 1 0 0 0 0 0 0 0 0 0 Db 0 ]
[{()1 Sl()WB()0 19 1 A(data)19 0 TN TL()Ec /AF f D()} 0 0 0 0 1 1 0 (.) 3 0 0 0 0 0 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(void* )0 19 1 A(data)19 0 TN TL()Ec /AF f D(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(struct )0 2 1 A(mbot_linkedList)EA(* )0 20 1 A(head)20 0 TN TL()Ec /AF f D()SM( [read])ES(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(struct )0 2 1 A(mbot_linkedList)EA(* )0 22 1 A(next)22 0 TN TL()Ec /AF f D()SM( [read])ES(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
[[0 0 0 0 0 -1 0 0 0 0 0 0 0 1 1 {()} -1]
 [[0 0 0 0 0 0 0]]
 [[0 0 0 0 0 0 [[{()1 Sl()WB(struct )0 2 1 A(mbot_linkedList)EA(* )0 23 1 A(prev)23 0 TN TL()Ec /AF f D()SM( [read])ES(
        )} 0 0 0 0 1 1 0 (.) 2 0 8 8 2 6 0 0 0 0 Db 0 ]
]]
]]
] D
0 1 79{TS}for RC ZF
/Ba f D /BO 0 D Bs
/UR (annotated.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
Pt

/Ba f D /BO 0 D Bs
/UR (annotated.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

NP RC ZF
()1 Sl()WB 0 Sn(
)0 1 0 H(MazBotV4)WB 4 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 1 H(Data)WB 5 Sn( Structures)EH(Here are the data structures with brief descriptions:)0 PT(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (classes.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 6 Sn(
)0 1 2 H(MazBotV4)WB 9 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 3 H(Data)WB 10 Sn( Structure Index)EH()BR()0 7 1 A(C)7 0 TN TL()Ec /AF f D(\240|\240)0 8 1 A(M)8 0 TN TL()Ec /AF f D()BR(
)3 PT()BR()0 7 1 A(C)7 0 TN TL()Ec /AF f D(\240|\240)0 8 1 A(M)8 0 TN TL()Ec /AF f D()BR(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (files.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 11 Sn(
)0 1 4 H(MazBotV4)WB 14 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 5 H(File)WB 15 Sn( List)EH(Here is a list of all files with brief descriptions:)4 PT(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (functions.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 16 Sn(
)0 1 6 H(MazBotV4)WB 30 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

  )BR(
    )UL(      )-1 LI()0 16 1 A(All)EA(
      )-1 LI()0 17 1 A(Variables)17 0 TN TL()Ec /AF f D(
    )LU(
  )BR(
)BR(
Here is a list of all struct and union fields with links to the structures/unions they belong to:)UL()-1 LI(amnt
: )0 18 1 A(CexplodeStrings)18 0 TN TL()Ec /AF f D(
)-1 LI(data
: )0 19 1 A(mbot_linkedList)19 0 TN TL()Ec /AF f D(
)-1 LI(head
: )0 20 1 A(mbot_linkedList)20 0 TN TL()Ec /AF f D(
)-1 LI(index
: )0 21 1 A(CexplodeStrings)21 0 TN TL()Ec /AF f D(
)-1 LI(next
: )0 22 1 A(mbot_linkedList)22 0 TN TL()Ec /AF f D(
)-1 LI(prev
: )0 23 1 A(mbot_linkedList)23 0 TN TL()Ec /AF f D(
)-1 LI(sem
: )0 24 1 A(MbotAtomic32)24 0 TN TL()Ec /AF f D(
)-1 LI(separator
: )0 25 1 A(CexplodeStrings)25 0 TN TL()Ec /AF f D(
)-1 LI(sepwasatend
: )0 26 1 A(CexplodeStrings)26 0 TN TL()Ec /AF f D(
)-1 LI(startedWdelim
: )0 27 1 A(CexplodeStrings)27 0 TN TL()Ec /AF f D(
)-1 LI(strings
: )0 28 1 A(CexplodeStrings)28 0 TN TL()Ec /AF f D(
)-1 LI(value
: )0 29 1 A(MbotAtomic32)29 0 TN TL()Ec /AF f D()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (functions_vars.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 17 Sn(
)0 1 7 H(MazBotV4)WB 31 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

  )BR(
    )UL(      )-1 LI()0 16 1 A(All)EA(
      )-1 LI()0 17 1 A(Variables)EA(
    )LU(
  )BR(
)BR(
\240)UL()-1 LI(amnt
: )0 18 1 A(CexplodeStrings)18 0 TN TL()Ec /AF f D(
)-1 LI(data
: )0 19 1 A(mbot_linkedList)19 0 TN TL()Ec /AF f D(
)-1 LI(head
: )0 20 1 A(mbot_linkedList)20 0 TN TL()Ec /AF f D(
)-1 LI(index
: )0 21 1 A(CexplodeStrings)21 0 TN TL()Ec /AF f D(
)-1 LI(next
: )0 22 1 A(mbot_linkedList)22 0 TN TL()Ec /AF f D(
)-1 LI(prev
: )0 23 1 A(mbot_linkedList)23 0 TN TL()Ec /AF f D(
)-1 LI(sem
: )0 24 1 A(MbotAtomic32)24 0 TN TL()Ec /AF f D(
)-1 LI(separator
: )0 25 1 A(CexplodeStrings)25 0 TN TL()Ec /AF f D(
)-1 LI(sepwasatend
: )0 26 1 A(CexplodeStrings)26 0 TN TL()Ec /AF f D(
)-1 LI(startedWdelim
: )0 27 1 A(CexplodeStrings)27 0 TN TL()Ec /AF f D(
)-1 LI(strings
: )0 28 1 A(CexplodeStrings)28 0 TN TL()Ec /AF f D(
)-1 LI(value
: )0 29 1 A(MbotAtomic32)29 0 TN TL()Ec /AF f D()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (globals_defs.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 32 Sn(
)0 1 8 H(MazBotV4)WB 38 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

  )BR(
    )UL(      )-1 LI()0 33 1 A(All)33 0 TN TL()Ec /AF f D(
      )-1 LI()0 34 1 A(Functions)34 0 TN TL()Ec /AF f D(
      )-1 LI()0 35 1 A(Enumerations)35 0 TN TL()Ec /AF f D(
      )-1 LI()0 36 1 A(Enumerator)36 0 TN TL()Ec /AF f D(
      )-1 LI()0 32 1 A(Defines)EA(
    )LU(
  )BR(
)BR(
\240)UL()-1 LI(CEXPLODE_LAST_ITEM
: )0 37 1 A(helpers.h)37 0 TN TL()Ec /AF f D()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (globals_enum.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 35 Sn(
)0 1 9 H(MazBotV4)WB 40 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

  )BR(
    )UL(      )-1 LI()0 33 1 A(All)33 0 TN TL()Ec /AF f D(
      )-1 LI()0 34 1 A(Functions)34 0 TN TL()Ec /AF f D(
      )-1 LI()0 35 1 A(Enumerations)EA(
      )-1 LI()0 36 1 A(Enumerator)36 0 TN TL()Ec /AF f D(
      )-1 LI()0 32 1 A(Defines)EA(
    )LU(
  )BR(
)BR(
\240)UL()-1 LI(ECexplodeRet
: )0 39 1 A(helpers.h)39 0 TN TL()Ec /AF f D()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (globals_eval.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 36 Sn(
)0 1 10 H(MazBotV4)WB 43 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

  )BR(
    )UL(      )-1 LI()0 33 1 A(All)33 0 TN TL()Ec /AF f D(
      )-1 LI()0 34 1 A(Functions)34 0 TN TL()Ec /AF f D(
      )-1 LI()0 35 1 A(Enumerations)EA(
      )-1 LI()0 36 1 A(Enumerator)EA(
      )-1 LI()0 32 1 A(Defines)EA(
    )LU(
  )BR(
)BR(
\240)UL()-1 LI(ECexplodeRet_InternalFailure
: )0 41 1 A(helpers.h)41 0 TN TL()Ec /AF f D(
)-1 LI(ECexplodeRet_InvalidParams
: )0 42 1 A(helpers.h)42 0 TN TL()Ec /AF f D()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (globals_func.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 34 Sn(
)0 1 11 H(MazBotV4)WB 88 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

  )BR(
    )UL(      )-1 LI()0 33 1 A(All)33 0 TN TL()Ec /AF f D(
      )-1 LI()0 34 1 A(Functions)EA(
      )-1 LI()0 35 1 A(Enumerations)EA(
      )-1 LI()0 36 1 A(Enumerator)EA(
      )-1 LI()0 32 1 A(Defines)EA(
    )LU(
  )BR(
  )BR(
    )UL(      )-1 LI()0 44 1 A(c)44 0 TN TL()Ec /AF f D(
      )-1 LI()0 45 1 A(m)45 0 TN TL()Ec /AF f D(
    )LU(
  )BR(
)BR(
\240

)0 3 12 H(-)WB 89 Sn()WB 44 Sn( c -)EA()EH()UL()-1 LI(Cexplode\201\202
: )0 46 1 A(helpers.h)46 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_concat\201\202
: )0 47 1 A(helpers.h)47 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_free\201\202
: )0 48 1 A(helpers.h)48 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_free_allButPieces\201\202
: )0 49 1 A(helpers.h)49 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getAmnt\201\202
: )0 50 1 A(helpers.h)50 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getfirst\201\202
: )0 51 1 A(helpers.h)51 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getlast\201\202
: )0 52 1 A(helpers.h)52 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getlentilllast\201\202
: )0 53 1 A(helpers.h)53 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getnext\201\202
: )0 54 1 A(helpers.h)54 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getNth\201\202
: )0 55 1 A(helpers.h)55 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_nextexists\201\202
: )0 56 1 A(helpers.h)56 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_removeCurrent\201\202
: )0 57 1 A(helpers.h)57 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_removeNth\201\202
: )0 58 1 A(helpers.h)58 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_sepwasatend\201\202
: )0 59 1 A(helpers.h)59 0 TN TL()Ec /AF f D()LU(


)0 3 13 H(-)WB 90 Sn()WB 45 Sn( m -)EA()EH()UL()-1 LI(mbot_atomicAdd\201\202
: )0 60 1 A(helpers.h)60 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicCAS\201\202
: )0 61 1 A(helpers.h)61 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicDec\201\202
: )0 62 1 A(helpers.h)62 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicDecIfGreater\201\202
: )0 63 1 A(helpers.h)63 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicDecIfSmaller\201\202
: )0 64 1 A(helpers.h)64 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicGet\201\202
: )0 65 1 A(helpers.h)65 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicIncIfGreater\201\202
: )0 66 1 A(helpers.h)66 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicIncIfSmaller\201\202
: )0 67 1 A(helpers.h)67 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_add\201\202
: )0 68 1 A(helpers.h)68 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_copylist_wdata\201\202
: )0 69 1 A(helpers.h)69 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_dataGet\201\202
: )0 70 1 A(helpers.h)70 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_dataSet\201\202
: )0 71 1 A(helpers.h)71 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_destroy\201\202
: )0 72 1 A(helpers.h)72 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_first\201\202
: )0 73 1 A(helpers.h)73 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_last\201\202
: )0 74 1 A(helpers.h)74 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_next\201\202
: )0 75 1 A(helpers.h)75 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_prev\201\202
: )0 76 1 A(helpers.h)76 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_head_get\201\202
: )0 77 1 A(helpers.h)77 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_init\201\202
: )0 78 1 A(helpers.h)78 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_release\201\202
: )0 79 1 A(helpers.h)79 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_safe_release\201\202
: )0 80 1 A(helpers.h)80 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_seek\201\202
: )0 81 1 A(helpers.h)81 0 TN TL()Ec /AF f D(
)-1 LI(mbot_lrtrim\201\202
: )0 82 1 A(helpers.h)82 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ltrim\201\202
: )0 83 1 A(helpers.h)83 0 TN TL()Ec /AF f D(
)-1 LI(mbot_rtrim\201\202
: )0 84 1 A(helpers.h)84 0 TN TL()Ec /AF f D(
)-1 LI(mbot_trimall\201\202
: )0 85 1 A(helpers.h)85 0 TN TL()Ec /AF f D(
)-1 LI(MbotAtomic32Init\201\202
: )0 86 1 A(helpers.h)86 0 TN TL()Ec /AF f D(
)-1 LI(MbotAtomic32Uninit\201\202
: )0 87 1 A(helpers.h)87 0 TN TL()Ec /AF f D()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (globals.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 33 Sn(
)0 1 14 H(MazBotV4)WB 94 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

  )BR(
    )UL(      )-1 LI()0 33 1 A(All)EA(
      )-1 LI()0 34 1 A(Functions)EA(
      )-1 LI()0 35 1 A(Enumerations)EA(
      )-1 LI()0 36 1 A(Enumerator)EA(
      )-1 LI()0 32 1 A(Defines)EA(
    )LU(
  )BR(
  )BR(
    )UL(      )-1 LI()0 91 1 A(c)91 0 TN TL()Ec /AF f D(
      )-1 LI()0 92 1 A(e)92 0 TN TL()Ec /AF f D(
      )-1 LI()0 93 1 A(m)93 0 TN TL()Ec /AF f D(
    )LU(
  )BR(
)BR(
Here is a list of all functions, variables, defines, enums, and typedefs with links to the files they belong to:

)0 3 15 H(-)WB 95 Sn()WB 91 Sn( c -)EA()EH()UL()-1 LI(Cexplode\201\202
: )0 46 1 A(helpers.h)46 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_concat\201\202
: )0 47 1 A(helpers.h)47 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_free\201\202
: )0 48 1 A(helpers.h)48 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_free_allButPieces\201\202
: )0 49 1 A(helpers.h)49 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getAmnt\201\202
: )0 50 1 A(helpers.h)50 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getfirst\201\202
: )0 51 1 A(helpers.h)51 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getlast\201\202
: )0 52 1 A(helpers.h)52 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getlentilllast\201\202
: )0 53 1 A(helpers.h)53 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getnext\201\202
: )0 54 1 A(helpers.h)54 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_getNth\201\202
: )0 55 1 A(helpers.h)55 0 TN TL()Ec /AF f D(
)-1 LI(CEXPLODE_LAST_ITEM
: )0 37 1 A(helpers.h)37 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_nextexists\201\202
: )0 56 1 A(helpers.h)56 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_removeCurrent\201\202
: )0 57 1 A(helpers.h)57 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_removeNth\201\202
: )0 58 1 A(helpers.h)58 0 TN TL()Ec /AF f D(
)-1 LI(Cexplode_sepwasatend\201\202
: )0 59 1 A(helpers.h)59 0 TN TL()Ec /AF f D()LU(


)0 3 16 H(-)WB 96 Sn()WB 92 Sn( e -)EA()EH()UL()-1 LI(ECexplodeRet
: )0 39 1 A(helpers.h)39 0 TN TL()Ec /AF f D(
)-1 LI(ECexplodeRet_InternalFailure
: )0 41 1 A(helpers.h)41 0 TN TL()Ec /AF f D(
)-1 LI(ECexplodeRet_InvalidParams
: )0 42 1 A(helpers.h)42 0 TN TL()Ec /AF f D()LU(


)0 3 17 H(-)WB 97 Sn()WB 93 Sn( m -)EA()EH()UL()-1 LI(mbot_atomicAdd\201\202
: )0 60 1 A(helpers.h)60 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicCAS\201\202
: )0 61 1 A(helpers.h)61 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicDec\201\202
: )0 62 1 A(helpers.h)62 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicDecIfGreater\201\202
: )0 63 1 A(helpers.h)63 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicDecIfSmaller\201\202
: )0 64 1 A(helpers.h)64 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicGet\201\202
: )0 65 1 A(helpers.h)65 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicIncIfGreater\201\202
: )0 66 1 A(helpers.h)66 0 TN TL()Ec /AF f D(
)-1 LI(mbot_atomicIncIfSmaller\201\202
: )0 67 1 A(helpers.h)67 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_add\201\202
: )0 68 1 A(helpers.h)68 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_copylist_wdata\201\202
: )0 69 1 A(helpers.h)69 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_dataGet\201\202
: )0 70 1 A(helpers.h)70 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_dataSet\201\202
: )0 71 1 A(helpers.h)71 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_destroy\201\202
: )0 72 1 A(helpers.h)72 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_first\201\202
: )0 73 1 A(helpers.h)73 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_last\201\202
: )0 74 1 A(helpers.h)74 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_next\201\202
: )0 75 1 A(helpers.h)75 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_get_prev\201\202
: )0 76 1 A(helpers.h)76 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_head_get\201\202
: )0 77 1 A(helpers.h)77 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_init\201\202
: )0 78 1 A(helpers.h)78 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_release\201\202
: )0 79 1 A(helpers.h)79 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_safe_release\201\202
: )0 80 1 A(helpers.h)80 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ll_seek\201\202
: )0 81 1 A(helpers.h)81 0 TN TL()Ec /AF f D(
)-1 LI(mbot_lrtrim\201\202
: )0 82 1 A(helpers.h)82 0 TN TL()Ec /AF f D(
)-1 LI(mbot_ltrim\201\202
: )0 83 1 A(helpers.h)83 0 TN TL()Ec /AF f D(
)-1 LI(mbot_rtrim\201\202
: )0 84 1 A(helpers.h)84 0 TN TL()Ec /AF f D(
)-1 LI(mbot_trimall\201\202
: )0 85 1 A(helpers.h)85 0 TN TL()Ec /AF f D(
)-1 LI(MbotAtomic32Init\201\202
: )0 86 1 A(helpers.h)86 0 TN TL()Ec /AF f D(
)-1 LI(MbotAtomic32Uninit\201\202
: )0 87 1 A(helpers.h)87 0 TN TL()Ec /AF f D()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (helpers_8h.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 12 Sn(
)0 1 18 H(MazBotV4)WB 100 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 19 H(helpers.h)WB 101 Sn( File Reference)EH()SM(#include <stdio.h>)ES()BR()SM(#include <string.h>)ES()BR()SM(#include <stdlib.h>)ES()BR()SM(#include <semaphore.h>)ES()BR(
)0 P()0 13 1 A(Go to the source code of this file.)13 0 TN TL()Ec /AF f D()EP(
)5 PT(
)2 1 1 HR()0 2 20 H(Define)WB 102 Sn( Documentation)EH(
)WB 37 Sn()EA(
)BR(
)BR(
      )6 PT(
)BR(
)BR(

)BR(
)BR(
)2 1 1 HR()0 2 21 H(Enumeration)WB 103 Sn( Type Documentation)EH(
)WB 39 Sn()EA(
)BR(
)BR(
      )7 PT(
)BR(
)BR(

)0 P(enumeration for Cexplodei's error return values )EP(
)0 DL()0 DT()BD(Enumerator: )ES()DD()8 PT()LD(

)BR(
)BR(
)2 1 1 HR()0 2 22 H(Function)WB 104 Sn( Documentation)EH(
)WB 46 Sn()EA(
)BR(
)BR(
      )9 PT(
)BR(
)BR(

)0 P(Explodes string to pieces according to delimiter. Result is stored in exp_obj and can be retrieved using functions below The results of explosion are stored in same order as they occurred in initial string, eg. if string "1 2 3 4" would be exploded with space \201" "\202 as delimiter, )0 51 1 A(Cexplode_getfirst\201\202)51 0 TN TL()Ec /AF f D( would return 1, )0 55 1 A(Cexplode_getNth\201\202)55 0 TN TL()Ec /AF f D( with n being 4, would return 4. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )10 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(amount of pieces - number smaller than 1 if an error occurs )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(, )0 57 1 A(Cexplode_removeCurrent)57 0 TN TL()Ec /AF f D(, )0 58 1 A(Cexplode_removeNth)58 0 TN TL()Ec /AF f D(, )0 50 1 A(Cexplode_getAmnt)50 0 TN TL()Ec /AF f D(, )0 56 1 A(Cexplode_nextexists)56 0 TN TL()Ec /AF f D(, )0 55 1 A(Cexplode_getNth)55 0 TN TL()Ec /AF f D(, )0 51 1 A(Cexplode_getfirst)51 0 TN TL()Ec /AF f D(, )0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D(, )0 52 1 A(Cexplode_getlast)52 0 TN TL()Ec /AF f D(, )0 48 1 A(Cexplode_free)48 0 TN TL()Ec /AF f D(, )0 49 1 A(Cexplode_free_allButPieces)49 0 TN TL()Ec /AF f D(, )0 53 1 A(Cexplode_getlentilllast)53 0 TN TL()Ec /AF f D(, )0 59 1 A(Cexplode_sepwasatend)59 0 TN TL()Ec /AF f D(, )0 47 1 A(Cexplode_concat)47 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 47 Sn()EA(
)BR(
)BR(
      )11 PT(
)BR(
)BR(

)0 P(Concatenates two exp_objs into one. Modifies the first argument to contain new exp_obj. Does not modify second argument. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )12 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(the amount of pieces in new exp_obj - negative number upon error. )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode for both first and second argument. )LD(

)BR(
)BR(
)WB 48 Sn()EA(
)BR(
)BR(
      )13 PT(
)BR(
)BR(

)0 P(Frees resources allocated by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( - BEWARE frees also splitted pieces. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )14 PT(
  )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode 
)DD(BEWARE frees also splitted pieces, in which the returned pointers by Cexplode_get* points. )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 49 1 A(Cexplode_free_allButPieces)49 0 TN TL()Ec /AF f D(, )0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 55 1 A(Cexplode_getNth)55 0 TN TL()Ec /AF f D(, )0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D(, )0 51 1 A(Cexplode_getfirst)51 0 TN TL()Ec /AF f D(, )0 52 1 A(Cexplode_getlast)52 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 49 Sn()EA(
)BR(
)BR(
      )15 PT(
)BR(
)BR(

)0 P(Frees resources allocated by call to )0 46 1 A(Cexplode\201\202)46 0 TN TL()Ec /AF f D( - does not free splitted pieces. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )16 PT(
  )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 48 1 A(Cexplode_free)48 0 TN TL()Ec /AF f D(, )0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 55 1 A(Cexplode_getNth)55 0 TN TL()Ec /AF f D(, )0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D(, )0 51 1 A(Cexplode_getfirst)51 0 TN TL()Ec /AF f D(, )0 52 1 A(Cexplode_getlast)52 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 50 Sn()EA(
)BR(
)BR(
      )17 PT(
)BR(
)BR(

)0 P(Get the amount of pieces in exploded object Must not be called before calling Cexplode. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )18 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(amount of exploded pieces stored in )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( container )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 51 Sn()EA(
)BR(
)BR(
      )19 PT(
)BR(
)BR(

)0 P(Get's the first exploded piece. Same as Cexplode_getNth\2011,*exp_obj\202;. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )20 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(NULL on error, othervice a pointer to result stored in Cexplode object )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 55 1 A(Cexplode_getNth)55 0 TN TL()Ec /AF f D(, )0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D(, )0 52 1 A(Cexplode_getlast)52 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 52 Sn()EA(
)BR(
)BR(
      )21 PT(
)BR(
)BR(

)0 P(Gets last exploded piece. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )22 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(NULL on error, othervice a pointer to result stored in Cexplode object )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 55 1 A(Cexplode_getNth)55 0 TN TL()Ec /AF f D(, )0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D(, )0 51 1 A(Cexplode_getfirst)51 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 53 Sn()EA(
)BR(
)BR(
      )23 PT(
)BR(
)BR(

)0 P(Gets the amount of chars from the start of the original string to the beginning of last found delimiter. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )24 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(amount of chars from the start of the original string to the beginning of last found delimiter )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 59 1 A(Cexplode_sepwasatend)59 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 54 Sn()EA(
)BR(
)BR(
      )25 PT(
)BR(
)BR(

)0 P(Get's next piece. Returns NULL if no more pieces are around. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )26 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(NULL on error, othervice a pointer to result stored in Cexplode object )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 55 1 A(Cexplode_getNth)55 0 TN TL()Ec /AF f D(, )0 51 1 A(Cexplode_getfirst)51 0 TN TL()Ec /AF f D(, )0 52 1 A(Cexplode_getlast)52 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 55 Sn()EA(
)BR(
)BR(
      )27 PT(
)BR(
)BR(

)0 P(Retrieve's Nth exploded piece - first is first \201index starts from 1, not from 0\202 Updates internal iterator, IE following call to Cexplode_getnext will retrieve index+1th piece. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )28 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(NULL on error, othervice a pointer to result stored in Cexplode object )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 51 1 A(Cexplode_getfirst)51 0 TN TL()Ec /AF f D(, )0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D(, )0 52 1 A(Cexplode_getlast)52 0 TN TL()Ec /AF f D(, )0 50 1 A(Cexplode_getAmnt)50 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 56 Sn()EA(
)BR(
)BR(
      )29 PT(
)BR(
)BR(

)0 P(Peeks if there's another result in exp_obj. Must not be called before calling Cexplode. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )30 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(1 if next piece exists \201Eg. if Cexplode_getnext et al. can be safely used\202, 0 if there's no next result in object. )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 54 1 A(Cexplode_getnext)54 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 57 Sn()EA(
)BR(
)BR(
      )31 PT(
)BR(
)BR(

)0 P(Removes the previously returned piece. )EP(
)0 P(Must not be called before calling Cexplode If removed item is last piece, the "sepwasatend" flag will be set true)EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )32 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(0 at success, -1 at failure )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 58 1 A(Cexplode_removeNth)58 0 TN TL()Ec /AF f D(, )0 50 1 A(Cexplode_getAmnt)50 0 TN TL()Ec /AF f D(, )0 56 1 A(Cexplode_nextexists)56 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 58 Sn()EA(
)BR(
)BR(
      )33 PT(
)BR(
)BR(

)0 P(Removes Nth piece from cexplode Must not be called before calling Cexplode If removed item is last piece, the "sepwasatend" flag will be set true! Note, you can use special CEXPLODE_LAST_ITEM define to remove the last item. )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )34 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(ptr to removed string )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 57 1 A(Cexplode_removeCurrent)57 0 TN TL()Ec /AF f D(, )0 50 1 A(Cexplode_getAmnt)50 0 TN TL()Ec /AF f D(, )0 56 1 A(Cexplode_nextexists)56 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 59 Sn()EA(
)BR(
)BR(
      )35 PT(
)BR(
)BR(

)0 P(returns 1 if last chars in original string were the separator - else returns 0 )EP(
)0 DL()0 DT()BD(Parameters:)ES()DD(  )36 PT(
  )LD(
)0 DL()0 DT()BD(Returns:)ES()DD(1 if last chars in original string were the separator - else returns 0 )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(Must not be called before calling Cexplode )LD(
)0 DL()0 DT()BD(See also:)ES()DD()0 46 1 A(Cexplode)46 0 TN TL()Ec /AF f D(, )0 53 1 A(Cexplode_getlentilllast)53 0 TN TL()Ec /AF f D( )LD(

)BR(
)BR(
)WB 60 Sn()EA(
)BR(
)BR(
      )37 PT(
)BR(
)BR(

)0 P(Increase value atomically - returns value before increment. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)WB 61 Sn()EA(
)BR(
)BR(
      )38 PT(
)BR(
)BR(

)BR(
)BR(
)WB 62 Sn()EA(
)BR(
)BR(
      )39 PT(
)BR(
)BR(

)0 P(Decrease value atomically - returns value before decrement. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)WB 63 Sn()EA(
)BR(
)BR(
      )40 PT(
)BR(
)BR(

)0 P(Decrease value atomically, if original value is greater than cmp. Returns original value. \201If returnval<cmp, no decrement occurred. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)WB 64 Sn()EA(
)BR(
)BR(
      )41 PT(
)BR(
)BR(

)0 P(Decrease value atomically, if original value is smaller than cmp. Returns original value. \201If returnval>cmp, no decrement occurred. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)WB 65 Sn()EA(
)BR(
)BR(
      )42 PT(
)BR(
)BR(

)0 P(Get the value atomically. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)WB 66 Sn()EA(
)BR(
)BR(
      )43 PT(
)BR(
)BR(

)0 P(Increase value atomically, if original value is greater than cmp. Returns original value. \201If returnval<cmp, no increment occurred. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)WB 67 Sn()EA(
)BR(
)BR(
      )44 PT(
)BR(
)BR(

)0 P(Increase value atomically, if original value is smaller than cmp. Returns original value. \201If returnval>cmp, no increment occurred. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)WB 68 Sn()EA(
)BR(
)BR(
      )45 PT(
)BR(
)BR(

)0 P(Adds item to list \201data\202. Does not do a copy of data. Any list item \201including head\202 can be used as _this. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(list entry corresponding to stored data )LD(

)BR(
)BR(
)WB 69 Sn()EA(
)BR(
)BR(
      )46 PT(
)BR(
)BR(

)0 P(Copies given list and itemsize bytes of data from each container to new list, and returns a pointer to the copylist. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(a pointer to the copylist and NULL on error )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(This assumes that each "container" in list holds at least itemsize bytes of data - and copies exactly itemsize bytes. 
)DD(Usable really only for lists which hold fixed size items! )LD(

)BR(
)BR(
)WB 70 Sn()EA(
)BR(
)BR(
      )47 PT(
)BR(
)BR(

)0 P(Gets data stored to an entry - entry and data are left untouched. )EP(

)BR(
)BR(
)WB 71 Sn()EA(
)BR(
)BR(
      )48 PT(
)BR(
)BR(

)0 P(Sets data to an list,. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(previous data )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(- this should be avoided. Malicious use may corrupt the list! )LD(

)BR(
)BR(
)WB 72 Sn()EA(
)BR(
)BR(
      )49 PT(
)BR(
)BR(

)0 P(Frees all entries from list, and destroys the list - does not free stored data. _this is NULLed upon return. )EP(

)BR(
)BR(
)WB 73 Sn()EA(
)BR(
)BR(
      )50 PT(
)BR(
)BR(

)0 P(Get's the first list element - returns first element or NULL if no elements stored, or if an error occurred. )EP(

)BR(
)BR(
)WB 74 Sn()EA(
)BR(
)BR(
      )51 PT(
)BR(
)BR(

)0 P(Gets the last element in list. )EP(

)BR(
)BR(
)WB 75 Sn()EA(
)BR(
)BR(
      )52 PT(
)BR(
)BR(

)0 P(Get's next element - NULL if error occurred, or last element was provided as argument. )EP(

)BR(
)BR(
)WB 76 Sn()EA(
)BR(
)BR(
      )53 PT(
)BR(
)BR(

)0 P(Gets previous list item. - returns previous item, or NULL if error occurred/first item given as param. )EP(

)BR(
)BR(
)WB 77 Sn()EA(
)BR(
)BR(
      )54 PT(
)BR(
)BR(

)0 P(Get the head of the list Head can be used to maintain the location of empty list. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(the head, and NULL on error )LD(
)0 DL()0 DT()BD(Warning:)ES()DD(HEAD IS NOT SUPPOSED TO BE USED AS STORING ELEMENT! )LD(

)BR(
)BR(
)WB 78 Sn()EA(
)BR(
)BR(
      )55 PT(
)BR(
)BR(

)0 P(Initializes linked list for use - returns ptr to list head. )EP(

)BR(
)BR(
)WB 79 Sn()EA(
)BR(
)BR(
      )56 PT(
)BR(
)BR(

)0 P(removes given item from list - does not free memory. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(removed list entry, and user must call free upon entry and stored data. )LD(

)BR(
)BR(
)WB 80 Sn()EA(
)BR(
)BR(
      )57 PT(
)BR(
)BR(

)0 P(removes list item which holds data pointed by data. Any list item can be given in _this. Does not free memory. Returns removed list entry, and user must call free upon entry and stored data. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(removed list entry )LD(

)BR(
)BR(
)WB 81 Sn()EA(
)BR(
)BR(
      )58 PT(
)BR(
)BR(

)0 P(Searchs through the list and returns element in which the held data matches data specified in params. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(, all elements must contain at least as much data as specified in size_t datasize! )LD(

)BR(
)BR(
)WB 82 Sn()EA(
)BR(
)BR(
      )59 PT(
)BR(
)BR(

)0 P(removes trailing trimchars as well as trimchars from the beginning of a string. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(number of characters removed )LD(

)BR(
)BR(
)WB 83 Sn()EA(
)BR(
)BR(
      )60 PT(
)BR(
)BR(

)0 P(removes trimchars from the beginning of a string. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(number of characters removed )LD(

)BR(
)BR(
)WB 84 Sn()EA(
)BR(
)BR(
      )61 PT(
)BR(
)BR(

)0 P(removes trailing trimchars from a string. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(number of characters removed )LD(

)BR(
)BR(
)WB 85 Sn()EA(
)BR(
)BR(
      )62 PT(
)BR(
)BR(

)0 P(removes all trimchars from a string. )EP(
)0 DL()0 DT()BD(Returns:)ES()DD(number of characters removed )LD(

)BR(
)BR(
)WB 86 Sn()EA(
)BR(
)BR(
      )63 PT(
)BR(
)BR(

)0 P(Creates 32bit atomic variable, compatible with mbot_atomic* operations. )EP(

)BR(
)BR(
)WB 87 Sn()EA(
)BR(
)BR(
      )64 PT(
)BR(
)BR(

)0 P(Uninitializes )0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(. This must not be called when it is possible someone is using the variable. )EP(
)0 DL()0 DT()BD(Warning:)ES()DD(If non x86 arch is used, these atomic ops are ineffective dummies using a huge semaphore \201provided only for compatibility\202. On x86 arch compile with define ARCH_x86 )LD(

)BR(
)BR(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (helpers_8h_source.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 13 Sn(
)0 1 23 H(MazBotV4)WB 273 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)0 1 24 H(helpers.h)WB 274 Sn()EH()0 12 1 A(Go to the documentation of this file.)EA()BR() 168 115 PR()WB 105 Sn()EA(00001 
)WB 106 Sn()EA(00002 /* **********************************************************************/
)WB 107 Sn()EA(00003 /*                                                                      *
)WB 108 Sn()EA(00004  *      Implementation of php&apos;s explode written in C                    *
)WB 109 Sn()EA(00005  *      Written by  Maz \2012008\202                                          *
)WB 110 Sn()EA(00006  *      http://maz-programmersdiary.blogspot.com/                       *
)WB 111 Sn()EA(00007  *                                                                      *
)WB 112 Sn()EA(00008  *      You&apos;re free to use this piece of code.                          *
)WB 113 Sn()EA(00009  *      You can also modify it freely, but if you                       *
)WB 114 Sn()EA(00010  *      improve this, you must write the improved code                  *
)WB 115 Sn()EA(00011  *      in comments at:                                                 *
)WB 116 Sn()EA(00012  *      http://maz-programmersdiary.blogspot.com/                       *
)WB 117 Sn()EA(00013  *      or at:                                                          *
)WB 118 Sn()EA(00014  *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
)WB 119 Sn()EA(00015  *      or mail the corrected version to me at                          *
)WB 120 Sn()EA(00016  *      Mazziesaccount@gmail.com                                        *
)WB 121 Sn()EA(00017  *                                                                      *
)WB 122 Sn()EA(00018  *      Revision History:                                               *
)WB 123 Sn()EA(00019  *                                                                      *
)WB 124 Sn()EA(00020  *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
)WB 125 Sn()EA(00021  *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
)WB 126 Sn()EA(00022  *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
)WB 127 Sn()EA(00023  *                              mbot_ll                                 *
)WB 128 Sn()EA(00024  *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
)WB 129 Sn()EA(00025  *                              \201untested\202                              *
)WB 130 Sn()EA(00026  *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
)WB 131 Sn()EA(00027  *                              usability in MazBotV4                   *
)WB 132 Sn()EA(00028  *      -v0.0.1 16.09.2008/Maz                                          *
)WB 133 Sn()EA(00029  *                                                                      */
)WB 134 Sn()EA(00030 /* ******************************************************************** */
)WB 135 Sn()EA(00031 )WR(
)WB 136 Sn()EA(00032 #ifndef HELPERS_H
)WB 137 Sn()EA(00033 #define HELPERS_H
)WB 138 Sn()EA(00034 
)WB 139 Sn()EA(00035 /* Some Cexplode calls support using this special item define */
)WB 140 Sn()EA()0 37 1 A(00036)EA( #define CEXPLODE_LAST_ITEM 0xFFFFFFFF
)WB 141 Sn()EA(00037 
)WB 142 Sn()EA(00038 #include <stdio.h>
)WB 143 Sn()EA(00039 #include <string.h>
)WB 144 Sn()EA(00040 #include <stdlib.h>
)WB 145 Sn()EA(00041 #include <semaphore.h>
)WB 146 Sn()EA(00042 
)WB 147 Sn()EA()0 3 1 A(00046)3 0 TN TL()Ec /AF f D( typedef struct )0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( 
)WB 148 Sn()EA(00047 {
)WB 149 Sn()EA()0 29 1 A(00048)29 0 TN TL()Ec /AF f D(     volatile unsigned int )0 29 1 A(value)29 0 TN TL()Ec /AF f D(;
)WB 150 Sn()EA()0 24 1 A(00049)24 0 TN TL()Ec /AF f D(     sem_t )0 24 1 A(sem)24 0 TN TL()Ec /AF f D(;      
)WB 151 Sn()EA(00050 })0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(;
)WB 152 Sn()EA(00051 
)WB 153 Sn()EA(00052 
)WB 154 Sn()EA()0 1 1 A(00056)1 0 TN TL()Ec /AF f D( typedef struct )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(
)WB 155 Sn()EA(00057 {
)WB 156 Sn()EA()0 18 1 A(00058)18 0 TN TL()Ec /AF f D(     int )0 18 1 A(amnt)18 0 TN TL()Ec /AF f D(;
)WB 157 Sn()EA()0 28 1 A(00059)28 0 TN TL()Ec /AF f D(     char **)0 28 1 A(strings)28 0 TN TL()Ec /AF f D(;
)WB 158 Sn()EA()0 25 1 A(00060)25 0 TN TL()Ec /AF f D(     char *)0 25 1 A(separator)25 0 TN TL()Ec /AF f D(;
)WB 159 Sn()EA()0 26 1 A(00061)26 0 TN TL()Ec /AF f D(     int )0 26 1 A(sepwasatend)26 0 TN TL()Ec /AF f D(;
)WB 160 Sn()EA()0 27 1 A(00062)27 0 TN TL()Ec /AF f D(     int )0 27 1 A(startedWdelim)27 0 TN TL()Ec /AF f D(;
)WB 161 Sn()EA()0 21 1 A(00063)21 0 TN TL()Ec /AF f D(     int )0 21 1 A(index)21 0 TN TL()Ec /AF f D(;
)WB 162 Sn()EA(00064 })0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D(;
)WB 163 Sn()EA(00065 
)WB 164 Sn()EA()0 39 1 A(00069)EA( typedef enum )0 39 1 A(ECexplodeRet)EA(
)WB 165 Sn()EA(00070 {)WR(
)WB 166 Sn()EA()0 41 1 A(00071)EA(     )0 41 1 A(ECexplodeRet_InternalFailure)EA(    = -666,
)WB 167 Sn()EA()0 42 1 A(00072)EA(     )0 42 1 A(ECexplodeRet_InvalidParams)EA(         = -667
)WB 168 Sn()EA(00073 })0 39 1 A(ECexplodeRet)EA(;
)WB 169 Sn()EA(00074 
)WB 170 Sn()EA(00085 int )0 57 1 A(Cexplode_removeCurrent)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202;
)WB 171 Sn()EA(00086 
)WB 172 Sn()EA(00098 char *)0 58 1 A(Cexplode_removeNth)EA(\201int nro,)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202;
)WB 173 Sn()EA(00099 
)WB 174 Sn()EA(00108 int )0 50 1 A(Cexplode_getAmnt)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202;
)WB 175 Sn()EA(00109 
)WB 176 Sn()EA(00122 int )0 46 1 A(Cexplode)EA(\201const char *string,const char *delim, )0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj \202;
)WB 177 Sn()EA(00123 
)WB 178 Sn()EA(00132 int )0 56 1 A(Cexplode_nextexists)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202;
)WB 179 Sn()EA(00133 
)WB 180 Sn()EA(00143 char *)0 55 1 A(Cexplode_getNth)EA(\201int index,)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202;
)WB 181 Sn()EA(00144 
)WB 182 Sn()EA(00152 char *)0 51 1 A(Cexplode_getfirst)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202;
)WB 183 Sn()EA(00153 
)WB 184 Sn()EA(00161 char *)0 54 1 A(Cexplode_getnext)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202;
)WB 185 Sn()EA(00169 char *)0 52 1 A(Cexplode_getlast)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *exp_obj\202;
)WB 186 Sn()EA(00170 
)WB 187 Sn()EA(00178 void )0 48 1 A(Cexplode_free)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202;
)WB 188 Sn()EA(00179 
)WB 189 Sn()EA(00186 void )0 49 1 A(Cexplode_free_allButPieces)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202;
)WB 190 Sn()EA(00187 
)WB 191 Sn()EA(00195 size_t )0 53 1 A(Cexplode_getlentilllast)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202;
)WB 192 Sn()EA(00196 
)WB 193 Sn()EA(00204 int )0 59 1 A(Cexplode_sepwasatend)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( exp_obj\202;
)WB 194 Sn()EA(00205 
)WB 195 Sn()EA(00214 int )0 47 1 A(Cexplode_concat)EA(\201)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *first,)0 1 1 A(CexplodeStrings)1 0 TN TL()Ec /AF f D( *second\202;)WR(
)WB 196 Sn()EA(00215 
)WB 197 Sn()EA(00216 
)WB 198 Sn()EA(00221 int )0 83 1 A(mbot_ltrim)EA(\201char *text, char trimchar\202;
)WB 199 Sn()EA(00222 
)WB 200 Sn()EA(00227 int )0 84 1 A(mbot_rtrim)EA(\201char *text, char trimchar\202;
)WB 201 Sn()EA(00228 
)WB 202 Sn()EA(00233 int )0 82 1 A(mbot_lrtrim)EA(\201char *text, char trimchar\202;
)WB 203 Sn()EA(00234 
)WB 204 Sn()EA(00239 int )0 85 1 A(mbot_trimall)EA(\201char *text, char trimchar\202;
)WB 205 Sn()EA(00240 
)WB 206 Sn()EA(00244 )0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( * )0 86 1 A(MbotAtomic32Init)EA(\201\202;
)WB 207 Sn()EA(00249 void )0 87 1 A(MbotAtomic32Uninit)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D( **_this_\202;
)WB 208 Sn()EA(00254 unsigned int )0 65 1 A(mbot_atomicGet)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic\202;
)WB 209 Sn()EA(00255 
)WB 210 Sn()EA(00260 unsigned int )0 60 1 A(mbot_atomicAdd)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic,unsigned int addition\202;
)WB 211 Sn()EA(00261 
)WB 212 Sn()EA(00266 unsigned int )0 62 1 A(mbot_atomicDec)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic,unsigned int decrement\202;
)WB 213 Sn()EA(00267 
)WB 214 Sn()EA(00272 unsigned int )0 63 1 A(mbot_atomicDecIfGreater)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic,unsigned int decrement, unsigned int cmp\202;
)WB 215 Sn()EA(00273 
)WB 216 Sn()EA(00278 unsigned int )0 64 1 A(mbot_atomicDecIfSmaller)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic,unsigned int decrement, unsigned int cmp\202;
)WB 217 Sn()EA(00279 
)WB 218 Sn()EA(00284 unsigned int )0 66 1 A(mbot_atomicIncIfGreater)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic,unsigned int decrement, unsigned int cmp\202;
)WB 219 Sn()EA(00285 
)WB 220 Sn()EA(00290 unsigned int )0 67 1 A(mbot_atomicIncIfSmaller)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic,unsigned int decrement, unsigned int cmp\202;
)WB 221 Sn()EA(00291 
)WB 222 Sn()EA(00292 #ifdef ARCH_x86
)WB 223 Sn()EA(00293 
)WB 224 Sn()EA(00297 __inline__ unsigned int )0 61 1 A(mbot_atomicCAS)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic, unsigned int old, unsigned int newval\202
)WB 225 Sn()EA(00298 {)WR(
)WB 226 Sn()EA(00299     __asm__ __volatile__\201
)WB 227 Sn()EA(00300     "lock cmpxchgl %w0,%1" /* Swap value comp equals */
)WB 228 Sn()EA(00301     : "+r"\201newval\202
)WB 229 Sn()EA(00302     : "m"\201atomic->)0 29 1 A(value)29 0 TN TL()Ec /AF f D(\202, "a"\201old\202 /* According to Intel&apos;s manual, comp value must be in EAX register */
)WB 230 Sn()EA(00303     : "memory"\202;
)WB 231 Sn()EA(00304 
)WB 232 Sn()EA(00305     return old;
)WB 233 Sn()EA(00306 } /* AaCpuAtomicCmpSwap32 */
)WB 234 Sn()EA(00307 #else
)WB 235 Sn()EA(00308 unsigned int )0 61 1 A(mbot_atomicCAS)EA(\201)0 3 1 A(MbotAtomic32)3 0 TN TL()Ec /AF f D(* atomic, unsigned int old, unsigned int newval\202;
)WB 236 Sn()EA(00309 #endif
)WB 237 Sn()EA(00310 
)WB 238 Sn()EA(00311 /* Containers */
)WB 239 Sn()EA(00312 
)WB 240 Sn()EA()0 2 1 A(00313)2 0 TN TL()Ec /AF f D( typedef struct )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(
)WB 241 Sn()EA(00314 {
)WB 242 Sn()EA()0 20 1 A(00315)20 0 TN TL()Ec /AF f D(     struct )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *)0 20 1 A(head)20 0 TN TL()Ec /AF f D(;
)WB 243 Sn()EA()0 22 1 A(00316)22 0 TN TL()Ec /AF f D(     struct )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *)0 22 1 A(next)22 0 TN TL()Ec /AF f D(;
)WB 244 Sn()EA()0 23 1 A(00317)23 0 TN TL()Ec /AF f D(     struct )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *)0 23 1 A(prev)23 0 TN TL()Ec /AF f D(;
)WB 245 Sn()EA()0 19 1 A(00318)19 0 TN TL()Ec /AF f D(     void *)0 19 1 A(data)19 0 TN TL()Ec /AF f D(;
)WB 246 Sn()EA(00319 })0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D(;
)WB 247 Sn()EA(00320 
)WB 248 Sn()EA(00324 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *)0 78 1 A(mbot_ll_init)EA(\201\202;
)WB 249 Sn()EA(00328 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 76 1 A(mbot_ll_get_prev)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202;
)WB 250 Sn()EA(00335 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 77 1 A(mbot_ll_head_get)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202;
)WB 251 Sn()EA(00336 
)WB 252 Sn()EA(00340 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 75 1 A(mbot_ll_get_next)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202;
)WB 253 Sn()EA(00341 
)WB 254 Sn()EA(00345 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 73 1 A(mbot_ll_get_first)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202;
)WB 255 Sn()EA(00346 )WR(
)WB 256 Sn()EA(00350 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 74 1 A(mbot_ll_get_last)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202;
)WB 257 Sn()EA(00351 
)WB 258 Sn()EA(00356 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 68 1 A(mbot_ll_add)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this,void *)0 19 1 A(data)19 0 TN TL()Ec /AF f D(\202;
)WB 259 Sn()EA(00357 
)WB 260 Sn()EA(00362 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 79 1 A(mbot_ll_release)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202;
)WB 261 Sn()EA(00363 
)WB 262 Sn()EA(00369 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 80 1 A(mbot_ll_safe_release)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this,void *)0 19 1 A(data)19 0 TN TL()Ec /AF f D(\202;
)WB 263 Sn()EA(00370 
)WB 264 Sn()EA(00374 void * )0 70 1 A(mbot_ll_dataGet)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this\202;
)WB 265 Sn()EA(00380 void * )0 71 1 A(mbot_ll_dataSet)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this,void *)0 19 1 A(data)19 0 TN TL()Ec /AF f D(\202;
)WB 266 Sn()EA(00381 
)WB 267 Sn()EA(00386 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( * )0 81 1 A(mbot_ll_seek)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *_this, void *)0 19 1 A(data)19 0 TN TL()Ec /AF f D(, size_t datasize\202;
)WB 268 Sn()EA(00387 
)WB 269 Sn()EA(00394 )0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *)0 69 1 A(mbot_ll_copylist_wdata)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( *old,size_t itemsize\202;
)WB 270 Sn()EA(00395 
)WB 271 Sn()EA(00399 void  )0 72 1 A(mbot_ll_destroy)EA(\201)0 2 1 A(mbot_linkedList)2 0 TN TL()Ec /AF f D( **_this\202;
)WB 272 Sn()EA(00400 #endif)RP()BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (index.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 275 Sn(
)0 1 25 H(MazBotV4)WB 276 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 26 H(MazBotHelpers_Cexplode_etc)WB 277 Sn( Documentation)EH()0 3 27 H(0.0.7)WB 278 Sn( 28.08.2009 )EH()UL(      )-1 LI()0 275 1 A(Main\240Page)EA(
      )-1 LI()0 0 1 A(Data\240Structures)EA(
)UL(      )-1 LI()0 0 1 A(Data\240Structures)EA(
      )-1 LI()0 16 1 A(Data\240Fields)EA()LU(
      )-1 LI()0 11 1 A(Files)EA(
)UL(      )-1 LI()0 11 1 A(File\240List)EA(
      )-1 LI()0 33 1 A(Globals)EA()LU()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (structCexplodeStrings.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 1 Sn(
)0 1 28 H(MazBotV4)WB 279 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 29 H(CexplodeStrings)WB 280 Sn( Struct Reference)EH(
)0 P(Struct for Cexplode object.  
)0 99 1 A(More...)99 0 TN TL()Ec /AF f D()EP(

)0 P()SM(#include <)0 13 1 A(helpers.h)EA(>)ES()EP(
)65 PT(
)2 1 1 HR()WB 99 Sn()EA()0 2 30 H(Detailed)WB 281 Sn( Description)EH(
)0 P(Struct for Cexplode object. )EP(
)2 1 1 HR()0 2 31 H(Field)WB 282 Sn( Documentation)EH(
)WB 18 Sn()EA(
)BR(
)BR(
      )66 PT(
)BR(
)BR(

)BR(
)BR(
)WB 21 Sn()EA(
)BR(
)BR(
      )67 PT(
)BR(
)BR(

)BR(
)BR(
)WB 25 Sn()EA(
)BR(
)BR(
      )68 PT(
)BR(
)BR(

)BR(
)BR(
)WB 26 Sn()EA(
)BR(
)BR(
      )69 PT(
)BR(
)BR(

)BR(
)BR(
)WB 27 Sn()EA(
)BR(
)BR(
      )70 PT(
)BR(
)BR(

)BR(
)BR(
)WB 28 Sn()EA(
)BR(
)BR(
      )71 PT(
)BR(
)BR(

)BR(
)BR(
)2 1 1 HR(The documentation for this struct was generated from the following file:)UL()-1 LI()0 13 1 A(helpers.h)EA()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (structMbotAtomic32.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 3 Sn(
)0 1 32 H(MazBotV4)WB 283 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 33 H(MbotAtomic32)WB 284 Sn( Struct Reference)EH(
)0 P(Struct for 32bit wide integer type used in atomic operations.  
)0 98 1 A(More...)98 0 TN TL()Ec /AF f D()EP(

)0 P()SM(#include <)0 13 1 A(helpers.h)EA(>)ES()EP(
)72 PT(
)2 1 1 HR()WB 98 Sn()EA()0 2 34 H(Detailed)WB 285 Sn( Description)EH(
)0 P(Struct for 32bit wide integer type used in atomic operations. )EP(
)2 1 1 HR()0 2 35 H(Field)WB 286 Sn( Documentation)EH(
)WB 24 Sn()EA(
)BR(
)BR(
      )73 PT(
)BR(
)BR(

)0 P(If non x86 arch is used, these atomic ops are dummies using semaphore. )EP(

)BR(
)BR(
)WB 29 Sn()EA(
)BR(
)BR(
      )74 PT(
)BR(
)BR(

)BR(
)BR(
)2 1 1 HR(The documentation for this struct was generated from the following file:)UL()-1 LI()0 13 1 A(helpers.h)EA()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc
DS
/Ba f D /BO 0 D Bs
/UR (structmbot__linkedList.html) D
/Ti (MazBotV4 Helpers API) D
/Au () D
/Df f D
/ME [()] D

0 BO R
()1 Sl()WB 2 Sn(
)0 1 36 H(MazBotV4)WB 287 Sn( Helpers API)EH(
)BD()UL()-1 LI(Cexplode
)-1 LI(Atomic oerations
)-1 LI(Linked list)LU()ES(
)0 P()BD(Copyright)ES()BR() 32 74 PR(/* **********************************************************************/
/*                                                                      *
 *      Implementation of php's explode written in C                    *
 *      Written by  Maz \2012008\202                                          *
 *      Added Atomic operations for x86 architecture and                *
 *      Linked list implementation.                                     *
 *      Written by  Maz \2012009-2010\202                                     *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *                                                                      *
 *      You're free to use this piece of code.                          *
 *      You can also modify it freely, but if you                       *
 *      improve this, you must write the improved code                  *
 *      in comments at:                                                 *
 *      http://maz-programmersdiary.blogspot.com/                       *
 *      or at:                                                          *
 *      http://c-ohjelmoijanajatuksia.blogspot.com/                     *
 *      or mail the corrected version to me at                          *
 *      Mazziesaccount@gmail.com                                        *
 *                                                                      *
 *      Revision History:                                               *
 *                                                                      *
 *      - 0.0.6 15.08.2009/Maz  Fixed atomic CAS                        *
 *      - 0.0.5 11.08.2009/Maz  Added Cexplode_free_allButPieces        *
 *      - 0.0.4 11.08.2009/Maz  Added atomic ops and                    *
 *                              mbot_ll                                 *
 *      -v0.0.3 31.07.2009/Maz  Added Cexplode_concat                   *
 *                              \201untested\202                              *
 *      -v0.0.2 21.07.2009/Maz  Some additions for better               *
 *                              usability in MazBotV4                   *
 *      -v0.0.1 16.09.2008/Maz                                          *
 *                                                                      */)WR(
/* ******************************************************************** */)RP(
)0 P(

)BR(
)0 1 37 H(mbot_linkedList)WB 288 Sn( Struct Reference)EH(
)0 P()SM(#include <)0 13 1 A(helpers.h)EA(>)ES()EP(
)75 PT(
)2 1 1 HR()0 2 38 H(Field)WB 289 Sn( Documentation)EH(
)WB 19 Sn()EA(
)BR(
)BR(
      )76 PT(
)BR(
)BR(

)BR(
)BR(
)WB 20 Sn()EA(
)BR(
)BR(
      )77 PT(
)BR(
)BR(

)BR(
)BR(
)WB 22 Sn()EA(
)BR(
)BR(
      )78 PT(
)BR(
)BR(

)BR(
)BR(
)WB 23 Sn()EA(
)BR(
)BR(
      )79 PT(
)BR(
)BR(

)BR(
)BR(
)2 1 1 HR(The documentation for this struct was generated from the following file:)UL()-1 LI()0 13 1 A(helpers.h)EA()LU(
)BR(
)BR()BR()0 P()R1 2 A(Most recent version)EA()BR()R2 2 A(Bug tracker)EA()BR()R3 2 A(Maz - programmer's diary)EA()BR()I(Contact: Mazziesaccount@gmail.com)ES(
)WB NL /BO 0 D TC /Ba f D Bs /AU f D /UR () D RC ZF
 tH WB
ND 1 gt{Ts 3 mul Np 0()0 C()BD(MazBotV4 Helpers API)ES()0 1 TN()EA()BN}if
1 NH le{4(1\240\240)1 C(MazBotV4 Helpers API)4 1 TN()EA()BN}if
1 NH le{5(2\240\240)1 C(Data Structures)5 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 6()0 C()BD(MazBotV4 Helpers API)ES()6 1 TN()EA()BN}if
1 NH le{9(3\240\240)1 C(MazBotV4 Helpers API)9 1 TN()EA()BN}if
1 NH le{10(4\240\240)1 C(Data Structure Index)10 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 11()0 C()BD(MazBotV4 Helpers API)ES()11 1 TN()EA()BN}if
1 NH le{14(5\240\240)1 C(MazBotV4 Helpers API)14 1 TN()EA()BN}if
1 NH le{15(6\240\240)1 C(File List)15 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 16()0 C()BD(MazBotV4 Helpers API)ES()16 1 TN()EA()BN}if
1 NH le{30(7\240\240)1 C(MazBotV4 Helpers API)30 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 17()0 C()BD(MazBotV4 Helpers API)ES()17 1 TN()EA()BN}if
1 NH le{31(8\240\240)1 C(MazBotV4 Helpers API)31 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 32()0 C()BD(MazBotV4 Helpers API)ES()32 1 TN()EA()BN}if
1 NH le{38(9\240\240)1 C(MazBotV4 Helpers API)38 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 35()0 C()BD(MazBotV4 Helpers API)ES()35 1 TN()EA()BN}if
1 NH le{40(10\240\240)1 C(MazBotV4 Helpers API)40 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 36()0 C()BD(MazBotV4 Helpers API)ES()36 1 TN()EA()BN}if
1 NH le{43(11\240\240)1 C(MazBotV4 Helpers API)43 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 34()0 C()BD(MazBotV4 Helpers API)ES()34 1 TN()EA()BN}if
1 NH le{88(12\240\240)1 C(MazBotV4 Helpers API)88 1 TN()EA()BN}if
3 NH le{89(12.0.1\240\240)3 C(-)WB 44 Sn( c -)89 1 TN()EA()BN}if
3 NH le{90(12.0.2\240\240)3 C(-)WB 45 Sn( m -)90 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 33()0 C()BD(MazBotV4 Helpers API)ES()33 1 TN()EA()BN}if
1 NH le{94(13\240\240)1 C(MazBotV4 Helpers API)94 1 TN()EA()BN}if
3 NH le{95(13.0.1\240\240)3 C(-)WB 91 Sn( c -)95 1 TN()EA()BN}if
3 NH le{96(13.0.2\240\240)3 C(-)WB 92 Sn( e -)96 1 TN()EA()BN}if
3 NH le{97(13.0.3\240\240)3 C(-)WB 93 Sn( m -)97 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 12()0 C()BD(MazBotV4 Helpers API)ES()12 1 TN()EA()BN}if
1 NH le{100(14\240\240)1 C(MazBotV4 Helpers API)100 1 TN()EA()BN}if
1 NH le{101(15\240\240)1 C(helpers.h File Reference)101 1 TN()EA()BN}if
2 NH le{102(15.1\240\240)2 C(Define Documentation)102 1 TN()EA()BN}if
2 NH le{103(15.2\240\240)2 C(Enumeration Type Documentation)103 1 TN()EA()BN}if
2 NH le{104(15.3\240\240)2 C(Function Documentation)104 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 13()0 C()BD(MazBotV4 Helpers API)ES()13 1 TN()EA()BN}if
1 NH le{273(16\240\240)1 C(MazBotV4 Helpers API)273 1 TN()EA()BN}if
1 NH le{274(17\240\240)1 C(helpers.h)274 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 275()0 C()BD(MazBotV4 Helpers API)ES()275 1 TN()EA()BN}if
1 NH le{276(18\240\240)1 C(MazBotV4 Helpers API)276 1 TN()EA()BN}if
1 NH le{277(19\240\240)1 C(MazBotHelpers_Cexplode_etc Documentation)277 1 TN()EA()BN}if
3 NH le{278(19.0.1\240\240)3 C(0.0.7 28.08.2009 )278 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 1()0 C()BD(MazBotV4 Helpers API)ES()1 1 TN()EA()BN}if
1 NH le{279(20\240\240)1 C(MazBotV4 Helpers API)279 1 TN()EA()BN}if
1 NH le{280(21\240\240)1 C(CexplodeStrings Struct Reference)280 1 TN()EA()BN}if
2 NH le{281(21.1\240\240)2 C(Detailed Description)281 1 TN()EA()BN}if
2 NH le{282(21.2\240\240)2 C(Field Documentation)282 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 3()0 C()BD(MazBotV4 Helpers API)ES()3 1 TN()EA()BN}if
1 NH le{283(22\240\240)1 C(MazBotV4 Helpers API)283 1 TN()EA()BN}if
1 NH le{284(23\240\240)1 C(MbotAtomic32 Struct Reference)284 1 TN()EA()BN}if
2 NH le{285(23.1\240\240)2 C(Detailed Description)285 1 TN()EA()BN}if
2 NH le{286(23.2\240\240)2 C(Field Documentation)286 1 TN()EA()BN}if
ND 1 gt{Ts 3 mul Np 2()0 C()BD(MazBotV4 Helpers API)ES()2 1 TN()EA()BN}if
1 NH le{287(24\240\240)1 C(MazBotV4 Helpers API)287 1 TN()EA()BN}if
1 NH le{288(25\240\240)1 C(mbot_linkedList Struct Reference)288 1 TN()EA()BN}if
2 NH le{289(25.1\240\240)2 C(Field Documentation)289 1 TN()EA()BN}if

/TE t D NP TU PM 0 eq and{/Pn () D showpage}if end restore
